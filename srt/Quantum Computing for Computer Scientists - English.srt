1
00:00:04,000 --> 00:00:08,445
>> Welcome to Quantum Computing
for Computer Scientists.

2
00:00:08,446 --> 00:00:10,130
Happy Valentine's Day.

3
00:00:10,131 --> 00:00:12,130
We will learn about
this most romantic of

4
00:00:12,131 --> 00:00:14,830
all subjects, Quantum Computing.

5
00:00:14,831 --> 00:00:18,000
This is a talk aimed
at Computer Scientists.

6
00:00:18,001 --> 00:00:19,705
We will not go over very much,

7
00:00:19,706 --> 00:00:21,230
if any, physics
during this talk.

8
00:00:21,231 --> 00:00:22,340
We won't go like
for the Double-Slit

9
00:00:22,341 --> 00:00:23,820
Experiment or
Uncertainty Principle.

10
00:00:23,821 --> 00:00:26,460
We're not learning
about any of that.

11
00:00:26,461 --> 00:00:28,645
We're going to cover
the Computation Model

12
00:00:28,646 --> 00:00:30,240
which you'll all be finding,

13
00:00:30,241 --> 00:00:32,955
fairly intuitive I think,
is a state machine.

14
00:00:32,956 --> 00:00:35,480
And we will run
a Quantum Algorithm on it,

15
00:00:35,481 --> 00:00:38,115
show that it outperforms
a classical Computation Model,

16
00:00:38,116 --> 00:00:40,285
and then we'll end
with some demos,

17
00:00:40,286 --> 00:00:42,190
including a running program

18
00:00:42,191 --> 00:00:45,155
in Q-sharp, Microsoft's
quantum language.

19
00:00:45,156 --> 00:00:47,885
This is the Gate Quantum
Computation Model.

20
00:00:47,886 --> 00:00:49,080
It looks a lot
like the classical

21
00:00:49,081 --> 00:00:50,720
Computation Model
where you have bits,

22
00:00:50,721 --> 00:00:52,060
and you send them
through the logic gates,

23
00:00:52,061 --> 00:00:53,815
and transformations
are applied to them.

24
00:00:53,816 --> 00:00:57,100
There's another
Computation Model called

25
00:00:57,101 --> 00:00:59,570
the Quantum Annealing Model

26
00:00:59,571 --> 00:01:01,590
which is used by D-Wave,
if you've heard of that.

27
00:01:01,591 --> 00:01:04,185
That's something
different from what

28
00:01:04,186 --> 00:01:05,430
we'll be going over but

29
00:01:05,431 --> 00:01:07,060
people think they
might be equivalent.

30
00:01:07,061 --> 00:01:08,520
The jury is still out on that.

31
00:01:08,521 --> 00:01:11,535
Anyway, I'm sure you'll
have a great time.

32
00:01:11,536 --> 00:01:13,970
So, I'm sure all of you have

33
00:01:13,971 --> 00:01:15,820
your reasons for being
here but here are

34
00:01:15,821 --> 00:01:18,000
three reasons I've come
up with if you need some

35
00:01:18,001 --> 00:01:19,468
additional convincing

36
00:01:19,469 --> 00:01:21,080
why you should learn
Quantum Computing.

37
00:01:21,081 --> 00:01:23,170
The first is that
quantum supremacy is

38
00:01:23,171 --> 00:01:25,700
expected this year,
this very year.

39
00:01:25,701 --> 00:01:28,340
Quantum supremacy means we have

40
00:01:28,341 --> 00:01:30,020
a real problem running on

41
00:01:30,021 --> 00:01:32,540
a real quantum computer
which in real-time,

42
00:01:32,541 --> 00:01:33,740
runs faster than
the same problem

43
00:01:33,741 --> 00:01:34,890
on a classical computer.

44
00:01:34,891 --> 00:01:36,430
So, Google has announced

45
00:01:36,431 --> 00:01:37,800
they think they'll
do it this year.

46
00:01:37,801 --> 00:01:39,650
If they do, it's
a really big thing.

47
00:01:39,651 --> 00:01:41,540
So, it might be in
your future. Who knows?

48
00:01:41,541 --> 00:01:44,130
Five, 10 years, we
could all be running

49
00:01:44,131 --> 00:01:47,965
some really tricky problems
on quantum computers.

50
00:01:47,966 --> 00:01:49,920
So, we have lots
of large companies,

51
00:01:49,921 --> 00:01:51,220
Microsoft, Google, Intel, IBM,

52
00:01:51,221 --> 00:01:52,970
they're all investing
billions of dollars

53
00:01:52,971 --> 00:01:54,920
in quantum computer
developments.

54
00:01:54,921 --> 00:01:57,385
There are lots of
really exciting applications.

55
00:01:57,386 --> 00:01:58,150
This is the one that everyone's

56
00:01:58,151 --> 00:01:59,895
heard about, Shor's algorithm.

57
00:01:59,896 --> 00:02:02,360
When this paper came out,
it lit the world on fire.

58
00:02:02,361 --> 00:02:03,760
People were like, "Wow,
quantum computers could

59
00:02:03,761 --> 00:02:05,410
actually have real
economic impact."

60
00:02:05,411 --> 00:02:08,055
We could factor RSA,

61
00:02:08,056 --> 00:02:10,000
and undermine our
global financial system,

62
00:02:10,001 --> 00:02:11,725
which is pretty cool.

63
00:02:11,726 --> 00:02:13,780
Here's one that
programmers will I

64
00:02:13,781 --> 00:02:15,130
think appreciate which is

65
00:02:15,131 --> 00:02:18,035
we can search an unordered list
in square root N time.

66
00:02:18,036 --> 00:02:19,660
So, you think for
an unordered list,

67
00:02:19,661 --> 00:02:21,885
you have to check
every element. That's ON.

68
00:02:21,886 --> 00:02:23,245
You can just get
a nice speed-up,

69
00:02:23,246 --> 00:02:25,560
just square root n queries
on a quantum computer,

70
00:02:25,561 --> 00:02:28,045
which is pretty, pretty
nifty, generally useful.

71
00:02:28,046 --> 00:02:29,695
And here's the one
which, I think,

72
00:02:29,696 --> 00:02:32,830
probably is the best probability
of changing the world.

73
00:02:32,831 --> 00:02:34,520
Sorry, Programmers scroll and

74
00:02:34,521 --> 00:02:36,165
search probably won't
[inaudible] too much.

75
00:02:36,166 --> 00:02:38,300
Which is, we might
be able to have

76
00:02:38,301 --> 00:02:39,890
an exponential speed-up in

77
00:02:39,891 --> 00:02:41,990
simulating quantum
mechanical systems.

78
00:02:41,991 --> 00:02:45,185
So, things like drug design,

79
00:02:45,186 --> 00:02:47,460
if you simulate like
biological molecules

80
00:02:47,461 --> 00:02:49,030
interacting, things like that,

81
00:02:49,031 --> 00:02:50,460
it could massively speed

82
00:02:50,461 --> 00:02:52,520
up a lot of our
biological research,

83
00:02:52,521 --> 00:02:56,125
and everyone talks about
nitrogen fixation for this.

84
00:02:56,126 --> 00:02:59,035
That's like part of
the main Microsoft sales pitch.

85
00:02:59,036 --> 00:03:00,720
But this is the one

86
00:03:00,721 --> 00:03:02,190
that actually motivated
me, the bottom one,

87
00:03:02,191 --> 00:03:03,585
which it's, I think,

88
00:03:03,586 --> 00:03:05,590
from talking to couple of
you before the presentation,

89
00:03:05,591 --> 00:03:06,905
we can also motivate you.

90
00:03:06,906 --> 00:03:09,440
It's intellectually
interesting, and it's

91
00:03:09,441 --> 00:03:10,920
interesting because it's just

92
00:03:10,921 --> 00:03:12,290
kind of outside my intuition.

93
00:03:12,291 --> 00:03:14,680
Like I think all of us, at
this point in our careers,

94
00:03:14,681 --> 00:03:17,060
can basically look at any
digital or mechanical system,

95
00:03:17,061 --> 00:03:20,000
and have like a ballpark idea
of how it works, right?

96
00:03:20,001 --> 00:03:21,660
But if you look at
a quantum computer,

97
00:03:21,661 --> 00:03:23,280
like how can a quantum computer

98
00:03:23,281 --> 00:03:24,460
outperform classical
computation?

99
00:03:24,461 --> 00:03:25,505
It doesn't make any sense.

100
00:03:25,506 --> 00:03:26,940
Like there's no way

101
00:03:26,941 --> 00:03:28,975
I could even start to
guess how it would work.

102
00:03:28,976 --> 00:03:31,125
And so, I really
wanted to learn it.

103
00:03:31,126 --> 00:03:32,620
And I think there's a reason
for this, and this is

104
00:03:32,621 --> 00:03:34,080
kind of getting
a bit philosophical.

105
00:03:34,081 --> 00:03:36,940
But our language,

106
00:03:36,941 --> 00:03:38,120
our informal
language that we use

107
00:03:38,121 --> 00:03:39,550
developed in
very classical world.

108
00:03:39,551 --> 00:03:43,035
It is simply not equipped to
deal with the quantum world,

109
00:03:43,036 --> 00:03:44,910
and this is why
any pop science article

110
00:03:44,911 --> 00:03:47,180
you've read on
quantum phenomena,

111
00:03:47,181 --> 00:03:49,140
it doesn't really ring true.

112
00:03:49,141 --> 00:03:51,520
All the metaphors,
they don't really make

113
00:03:51,521 --> 00:03:53,210
sense because we're trying to

114
00:03:53,211 --> 00:03:54,270
express it in
this language which

115
00:03:54,271 --> 00:03:55,595
is developed in
the classical world.

116
00:03:55,596 --> 00:03:56,980
We need to learn

117
00:03:56,981 --> 00:03:59,490
a new language which is
the language of mathematics,

118
00:03:59,491 --> 00:04:01,575
and that is the only thing
which will actually let us

119
00:04:01,576 --> 00:04:02,820
understand quantum mechanics is

120
00:04:02,821 --> 00:04:04,330
to learn it mathematically.

121
00:04:04,331 --> 00:04:06,495
All metaphors and analogies
will lead you astray.

122
00:04:06,496 --> 00:04:09,980
There's a famous quote
here by a physicist

123
00:04:09,981 --> 00:04:13,910
named David Mermin which
is "Shut up and calculate",

124
00:04:13,911 --> 00:04:15,400
with regard to
quantum mechanics.

125
00:04:15,401 --> 00:04:16,660
So, some grad students,

126
00:04:16,661 --> 00:04:17,690
maybe they lean back
in their chair and

127
00:04:17,691 --> 00:04:18,730
they're like, "Oh, what
does this all mean?"

128
00:04:18,731 --> 00:04:20,805
Shut up and calculate.
Just trust the math.

129
00:04:20,806 --> 00:04:23,075
Math is the only thing which
will not lead you astray.

130
00:04:23,076 --> 00:04:26,750
Okay, here's how this
presentation will break down.

131
00:04:26,751 --> 00:04:29,220
First, we're going
to learn how to

132
00:04:29,221 --> 00:04:31,910
represent computation using
super basic linear algebra,

133
00:04:31,911 --> 00:04:34,460
matrices, vectors,
matrix multiplication.

134
00:04:34,461 --> 00:04:38,620
Then we will generalize
that to learn about Qubits,

135
00:04:38,621 --> 00:04:40,905
superposition, and
quantum logic gates.

136
00:04:40,906 --> 00:04:44,100
And finally, we will use
all those tools we've developed

137
00:04:44,101 --> 00:04:46,225
to go over the simplest problem

138
00:04:46,226 --> 00:04:48,220
where quantum computer
outperforms a classical computer.

139
00:04:48,221 --> 00:04:50,015
This is called the
Deutsche Oracle problem.

140
00:04:50,016 --> 00:04:50,940
I mean, there are
a bunch of problems,

141
00:04:50,941 --> 00:04:52,660
but this is the simplest.

142
00:04:52,661 --> 00:04:57,450
And finally, it'll be almost
negligent to let you get out

143
00:04:57,451 --> 00:04:59,190
of here without learning
about Quantum Entanglement and

144
00:04:59,191 --> 00:05:01,250
Teleportation just because
with the tools we'll develop,

145
00:05:01,251 --> 00:05:02,930
they're so easy to understand.

146
00:05:02,931 --> 00:05:04,350
So, I'll have bonus topics,

147
00:05:04,351 --> 00:05:05,555
and then we'll have some demos.

148
00:05:05,556 --> 00:05:07,235
All right, let's get to it.

149
00:05:07,236 --> 00:05:12,565
You'll become very, very
familiar with these two vectors.

150
00:05:12,566 --> 00:05:15,105
This is how we
represent a 0 and a 1,

151
00:05:15,106 --> 00:05:18,340
the two values of one bit
in classical terms.

152
00:05:18,341 --> 00:05:20,350
So, the top one,

153
00:05:20,351 --> 00:05:23,995
it's just 1 over 0, and
the bottom one is just 0 over 1.

154
00:05:23,996 --> 00:05:25,940
You can also write them in that

155
00:05:25,941 --> 00:05:27,910
weird angle bracket thing.

156
00:05:27,911 --> 00:05:30,260
That's called
Dirac Vector Notation.

157
00:05:30,261 --> 00:05:31,690
So, you have a zero
in there. That means

158
00:05:31,691 --> 00:05:33,405
this is the value
of that vector.

159
00:05:33,406 --> 00:05:35,715
If you have trouble
remembering this,

160
00:05:35,716 --> 00:05:39,410
just think of it like
an array indexed from 0,

161
00:05:39,411 --> 00:05:41,410
and so, there's a

162
00:05:41,411 --> 00:05:43,950
1 in the 0th index,
that means it's a zero.

163
00:05:43,951 --> 00:05:46,255
There's a 1 in the first index,
that means it's a 1.

164
00:05:46,256 --> 00:05:48,585
Okay, everyone's fine with this?

165
00:05:48,586 --> 00:05:49,820
You'll be very
familiar with this by

166
00:05:49,821 --> 00:05:51,770
the end of the presentation.

167
00:05:51,771 --> 00:05:54,815
We're going to go over

168
00:05:54,816 --> 00:05:58,165
matrix multiplication
really quickly.

169
00:05:58,166 --> 00:06:01,980
So, the way to

170
00:06:01,981 --> 00:06:03,090
think about
matrix multiplication,

171
00:06:03,091 --> 00:06:03,980
just to review for you.

172
00:06:03,981 --> 00:06:05,800
Most of you will have
gone over this in your

173
00:06:05,801 --> 00:06:08,135
Linear Algebra courses
the first or second day.

174
00:06:08,136 --> 00:06:10,590
So, if we have a matrix
multiplied by a vector,

175
00:06:10,591 --> 00:06:12,855
you kind of take
this horizontal row,

176
00:06:12,856 --> 00:06:14,830
and then flip it,
and multiply it

177
00:06:14,831 --> 00:06:18,020
point-wise with
these vector values.

178
00:06:18,021 --> 00:06:19,840
So, a times x, b times

179
00:06:19,841 --> 00:06:20,930
y, and that's how
you get the top one.

180
00:06:20,931 --> 00:06:22,465
And you do the same thing
in the bottom row.

181
00:06:22,466 --> 00:06:23,870
C times x, d times y,

182
00:06:23,871 --> 00:06:25,605
and you get a two vector.

183
00:06:25,606 --> 00:06:28,945
The same thing happens
with three-by-three matrix.

184
00:06:28,946 --> 00:06:31,220
A times x, b times y,

185
00:06:31,221 --> 00:06:33,630
c times z, and you
get this matrix.

186
00:06:33,631 --> 00:06:37,410
This vector, you can also
multiply matrices together.

187
00:06:37,411 --> 00:06:39,745
We won't really be
doing much of that.

188
00:06:39,746 --> 00:06:42,420
And there's a very
special matrix called

189
00:06:42,421 --> 00:06:47,030
the Identity Matrix which
has zeros everywhere,

190
00:06:47,031 --> 00:06:49,545
except for ones along
the main diagonal,

191
00:06:49,546 --> 00:06:53,130
and anything multiplied by
the Identity Matrix is itself.

192
00:06:53,131 --> 00:06:54,435
It's just like multiplying by 1.

193
00:06:54,436 --> 00:06:55,870
In fact, usually, you refer to

194
00:06:55,871 --> 00:06:58,045
the Identity Matrix
by the symbol 1.

195
00:06:58,046 --> 00:07:00,055
Now thankfully, for simplicity,

196
00:07:00,056 --> 00:07:01,260
a lot of the matrices we'll be

197
00:07:01,261 --> 00:07:02,530
using look a lot like this.

198
00:07:02,531 --> 00:07:04,605
They're mostly 0s
with just some 1s,

199
00:07:04,606 --> 00:07:06,605
and you can notice, it's
a nice rule of thumb,

200
00:07:06,606 --> 00:07:08,890
that relative to
the identity matrix,

201
00:07:08,891 --> 00:07:12,545
this matrix has the middle
two rows flipped, okay?

202
00:07:12,546 --> 00:07:14,230
And that's actually
the action it

203
00:07:14,231 --> 00:07:16,585
has on anything it multiplies.

204
00:07:16,586 --> 00:07:18,980
So, it flips
the middle two rows.

205
00:07:18,981 --> 00:07:20,810
It's a nice sort
of rule of thumb

206
00:07:20,811 --> 00:07:24,140
to remember how
matrix multiplication works.

207
00:07:24,141 --> 00:07:25,310
Does anyone have
any trouble with this?

208
00:07:25,311 --> 00:07:27,010
Because you really need to know

209
00:07:27,011 --> 00:07:29,195
this in order to go ahead.

210
00:07:29,196 --> 00:07:32,505
You got to know it. Okay, great.

211
00:07:32,506 --> 00:07:35,710
Operations are actually, I'd
like to make this a quiz.

212
00:07:35,711 --> 00:07:37,110
Can anyone tell me what are

213
00:07:37,111 --> 00:07:43,515
the four operations on
one bit? There's four of them.

214
00:07:43,516 --> 00:07:45,595
>>One bit.

215
00:07:45,596 --> 00:07:46,505
>>One bit.

216
00:07:46,506 --> 00:07:47,890
>>AND, OR, exclusive-or.

217
00:07:47,891 --> 00:07:50,450
>> That's around two bits.

218
00:07:50,451 --> 00:07:51,010
>>Not identity.

219
00:07:51,011 --> 00:07:52,470
>>Identity not.

220
00:07:52,471 --> 00:07:53,680
>>Set to 0, set to 1.

221
00:07:53,681 --> 00:07:55,125
>>Set 0, set 1. There we go.

222
00:07:55,126 --> 00:07:57,745
Good. Yes. So, we have identity,

223
00:07:57,746 --> 00:08:00,340
just f of x equals x.

224
00:08:00,341 --> 00:08:02,170
Negation fx equals not

225
00:08:02,171 --> 00:08:04,650
x. Constant-0, it's
always set to 0.

226
00:08:04,651 --> 00:08:05,780
Constant-1, it's
always set to 1.

227
00:08:05,781 --> 00:08:09,950
You can see with a diagram
how it kind of looks, okay?

228
00:08:09,951 --> 00:08:12,805
And we can write
these as matrices.

229
00:08:12,806 --> 00:08:16,190
So, the identity is
just the Identity Matrix.

230
00:08:16,191 --> 00:08:19,040
This, remember, is
our symbol for zero.

231
00:08:19,041 --> 00:08:21,220
Identity multiplied by 0 is 0.

232
00:08:21,221 --> 00:08:22,840
Identity multiplied by 1 is 1.

233
00:08:22,841 --> 00:08:28,240
Here's negation. You flip
it from 0 to 1, and 1 to 0.

234
00:08:28,241 --> 00:08:31,120
Same thing for
constant-0, constant-1.

235
00:08:31,121 --> 00:08:33,370
So, I hope I've
convinced you we can

236
00:08:33,371 --> 00:08:35,710
represent very simple
functions at least,

237
00:08:35,711 --> 00:08:41,520
with matrices multiplied by
our 0 and 1 vectors, okay?

238
00:08:41,521 --> 00:08:44,060
And remember
these four functions

239
00:08:44,061 --> 00:08:45,365
because I will quiz
you later on them.

240
00:08:45,366 --> 00:08:49,270
They'll come back up. So, let's

241
00:08:49,271 --> 00:08:50,810
talk about Reversible Computing.

242
00:08:50,811 --> 00:08:52,700
Reversible Computing is
a neat sort of buzzword.

243
00:08:52,701 --> 00:08:55,665
It if you've read the popular
sci-fi book Accelerando,

244
00:08:55,666 --> 00:08:58,040
it talks about
Reversible Computing,

245
00:08:58,041 --> 00:09:00,855
and basically it means
that if I tell you

246
00:09:00,856 --> 00:09:03,785
the operation I did and
the output of that operation,

247
00:09:03,786 --> 00:09:06,750
you can always tell
the input of that operation,

248
00:09:06,751 --> 00:09:08,730
if the operation's reversible.

249
00:09:08,731 --> 00:09:13,455
So intuitively, operations
that just shuffle bits around,

250
00:09:13,456 --> 00:09:15,200
like permute them,
they are reversible.

251
00:09:15,201 --> 00:09:16,500
But operations that erase

252
00:09:16,501 --> 00:09:18,965
bits and then overwrite
them are not reversible.

253
00:09:18,966 --> 00:09:21,685
And in our previous slide,

254
00:09:21,686 --> 00:09:23,470
identity and negation are both

255
00:09:23,471 --> 00:09:26,345
reversible because I
say the output is one,

256
00:09:26,346 --> 00:09:28,555
and I put it through
the negation gate.

257
00:09:28,556 --> 00:09:30,605
That means the input was zero.
You can always tell that.

258
00:09:30,606 --> 00:09:32,180
But if I say the output was 1,

259
00:09:32,181 --> 00:09:34,445
and I put it through
the constant-1 operation,

260
00:09:34,446 --> 00:09:35,825
you can't tell
what the input was.

261
00:09:35,826 --> 00:09:38,365
It's not reversible.
It erases information.

262
00:09:38,366 --> 00:09:40,415
And the nice thing
about Quantum Computing,

263
00:09:40,416 --> 00:09:41,395
which you're going to remember,

264
00:09:41,396 --> 00:09:43,800
is that one of

265
00:09:43,801 --> 00:09:45,955
the computers only use
reversible operations.

266
00:09:45,956 --> 00:09:47,190
Those are the only ones
we care about.

267
00:09:47,191 --> 00:09:48,770
So, the only operation we

268
00:09:48,771 --> 00:09:50,520
actually care about on
this slide is really negation.

269
00:09:50,521 --> 00:09:53,230
Like also identity but it's
the same as doing nothing.

270
00:09:53,231 --> 00:09:58,190
A further fun fact about
chronic computers is

271
00:09:58,191 --> 00:10:00,690
they actually only use

272
00:10:00,691 --> 00:10:02,440
operations which are
their own inverses.

273
00:10:02,441 --> 00:10:04,710
So, not only are they
reversible but if you apply them

274
00:10:04,711 --> 00:10:07,535
twice you'll just get
back the same input value.

275
00:10:07,536 --> 00:10:09,145
And we're going
to go in a little,

276
00:10:09,146 --> 00:10:12,400
this is kind of like going
into pop science but whatever.

277
00:10:12,401 --> 00:10:16,185
There's something called
the Von Neumann Vander Limit,

278
00:10:16,186 --> 00:10:18,945
which is the smallest amount of

279
00:10:18,946 --> 00:10:21,795
energy physicists
have calculated

280
00:10:21,796 --> 00:10:24,285
is necessary for the simplest
possible calculation,

281
00:10:24,286 --> 00:10:27,265
which raises is non-reversible.

282
00:10:27,266 --> 00:10:29,840
And reversible computing might

283
00:10:29,841 --> 00:10:31,870
eventually lead us
go beyond that limit,

284
00:10:31,871 --> 00:10:34,180
more efficient than
that theoretical limit.

285
00:10:34,181 --> 00:10:36,220
Now, currently, processors needs

286
00:10:36,221 --> 00:10:37,705
millions of times more energy

287
00:10:37,706 --> 00:10:39,090
than the Von Neumann
Vander Limit but,

288
00:10:39,091 --> 00:10:41,440
you know, 5,000 years
from now, who knows?

289
00:10:41,441 --> 00:10:43,725
Pretty nifty. All right.

290
00:10:43,726 --> 00:10:46,140
This is something you
probably did not go over in

291
00:10:46,141 --> 00:10:49,430
linear algebra but don't worry
it's still pretty simple.

292
00:10:49,431 --> 00:10:50,710
It's called the tensor product.

293
00:10:50,711 --> 00:10:54,115
So if you have the tensor
product of two vectors,

294
00:10:54,116 --> 00:10:57,240
it's kind of like you take
the second vector and you

295
00:10:57,241 --> 00:11:00,530
tile it for each element
in the first vector.

296
00:11:00,531 --> 00:11:04,120
So, X0 gets its own copy
and X1 gets its own copy.

297
00:11:04,121 --> 00:11:07,945
And then, you multiply it
out so you get eventually X0,

298
00:11:07,946 --> 00:11:10,535
Y0, X0, Y1, et cetera.

299
00:11:10,536 --> 00:11:14,105
It's maybe easier to look
at this with real numbers.

300
00:11:14,106 --> 00:11:16,130
Here we have one times three,

301
00:11:16,131 --> 00:11:18,560
one times four, two times three,

302
00:11:18,561 --> 00:11:21,290
and two times four to get this.

303
00:11:21,291 --> 00:11:25,405
Here's how it looks
like with three vectors.

304
00:11:25,406 --> 00:11:27,235
You get this like giant array.

305
00:11:27,236 --> 00:11:28,680
Don't worry about it too much.

306
00:11:28,681 --> 00:11:30,110
And I'd like to point out

307
00:11:30,111 --> 00:11:32,945
that if we use R0 and one values

308
00:11:32,946 --> 00:11:35,360
you end up with a vector

309
00:11:35,361 --> 00:11:37,545
which has a one in
only a single position.

310
00:11:37,546 --> 00:11:39,200
Okay. Does anyone have

311
00:11:39,201 --> 00:11:40,960
any real trouble
with this concept?

312
00:11:40,961 --> 00:11:42,130
If I gave you
two vectors you could

313
00:11:42,131 --> 00:11:44,050
probably calculate
the tensor product.

314
00:11:44,051 --> 00:11:47,270
It's not entirely
difficult. All right.

315
00:11:47,271 --> 00:11:49,225
But, the final point
animate leads

316
00:11:49,226 --> 00:11:53,180
into how do we represent
multiple classical bits?

317
00:11:53,181 --> 00:11:55,470
And we represent them
by their tensor product.

318
00:11:55,471 --> 00:11:59,070
So, 00 remember we tensor,
this is a zero symbol.

319
00:11:59,071 --> 00:12:01,720
0 tensor with 0 is this,

320
00:12:01,721 --> 00:12:03,615
product state, we call it,

321
00:12:03,616 --> 00:12:07,970
01 is this product state
10 is this product state,

322
00:12:07,971 --> 00:12:10,190
like 0 times 1, 0,

323
00:12:10,191 --> 00:12:13,175
0 time 0, 0, 1 time 1, 1.

324
00:12:13,176 --> 00:12:16,270
One times 0, 0. Okay. And 11

325
00:12:16,271 --> 00:12:17,995
is this product state
and similar

326
00:12:17,996 --> 00:12:20,720
to just a single bit
you can think of

327
00:12:20,721 --> 00:12:23,780
this is an index in
this vector array.

328
00:12:23,781 --> 00:12:25,570
So, this is 0. There's a one

329
00:12:25,571 --> 00:12:27,430
at the zero position.
This is one.

330
00:12:27,431 --> 00:12:30,570
There's value with
the first position

331
00:12:30,571 --> 00:12:32,070
coming from zero and,

332
00:12:32,071 --> 00:12:33,680
this is two value of
the second position,

333
00:12:33,681 --> 00:12:35,145
three value of
the third position.

334
00:12:35,146 --> 00:12:38,130
This is the only time
I will tenser

335
00:12:38,131 --> 00:12:41,355
three bits together thankfully,
because they us humus.

336
00:12:41,356 --> 00:12:44,460
They grow exponentially in
size but it works for this.

337
00:12:44,461 --> 00:12:50,065
So, four is 100 you have
01234 is where the one bit is.

338
00:12:50,066 --> 00:12:52,805
Okay. Yeah. So, we call
this the product state.

339
00:12:52,806 --> 00:12:54,680
We can always factor it out into

340
00:12:54,681 --> 00:12:58,110
its individual states and

341
00:12:58,111 --> 00:12:59,605
the product state of n bits

342
00:12:59,606 --> 00:13:01,000
is a vector of size
of two to the n. Here,

343
00:13:01,001 --> 00:13:02,380
we see a sort of whisper

344
00:13:02,381 --> 00:13:03,670
of the power of
quantum computing in

345
00:13:03,671 --> 00:13:05,135
this exponential term but

346
00:13:05,136 --> 00:13:06,990
hold that thought,
we'll get back to it.

347
00:13:06,991 --> 00:13:12,280
So, we're going to learn
a very important operation,

348
00:13:12,281 --> 00:13:13,430
very fundamental to

349
00:13:13,431 --> 00:13:14,680
reversible computing
and quantum computing

350
00:13:14,681 --> 00:13:16,950
is called CNOT or
conditional not.

351
00:13:16,951 --> 00:13:18,960
It operates on a pair of bits.

352
00:13:18,961 --> 00:13:20,260
You designate one bit,

353
00:13:20,261 --> 00:13:22,920
the control, bit the other bit
is the target bit.

354
00:13:22,921 --> 00:13:26,115
So, the control bit if it's
one it flips the target bit.

355
00:13:26,116 --> 00:13:27,920
If it's zero it
leaves the target bit

356
00:13:27,921 --> 00:13:30,840
alone and the control bit
is always left alone.

357
00:13:30,841 --> 00:13:33,255
So, if we have
the most significant bit

358
00:13:33,256 --> 00:13:34,945
of a 2-bit system as control,

359
00:13:34,946 --> 00:13:36,800
the least significant
bit is target,

360
00:13:36,801 --> 00:13:41,300
then 00 since this is
the most significant bit,

361
00:13:41,301 --> 00:13:44,795
it's the target bit, and just
goes to 00, 01 goes to 01.

362
00:13:44,796 --> 00:13:47,270
Now, 10, since
the control bit is

363
00:13:47,271 --> 00:13:50,860
one maps to 11 because
it flips the other bit,

364
00:13:50,861 --> 00:13:53,490
and 11 since it again flips,

365
00:13:53,491 --> 00:13:56,660
the target bit goes to 10.

366
00:13:56,661 --> 00:13:59,950
And this matrix, you can
actually kind of write it,

367
00:13:59,951 --> 00:14:01,520
you see there's a sort
of correspondence

368
00:14:01,521 --> 00:14:03,100
here we flip
the bottom two rows,

369
00:14:03,101 --> 00:14:04,695
which is the identity matrix,

370
00:14:04,696 --> 00:14:06,260
and this I claim

371
00:14:06,261 --> 00:14:07,775
which I will show in
the next couple slides,

372
00:14:07,776 --> 00:14:10,080
will change our product states

373
00:14:10,081 --> 00:14:12,380
according to
the semantics of CNOT.

374
00:14:12,381 --> 00:14:14,165
So, does everyone get
the semantics here?

375
00:14:14,166 --> 00:14:15,530
We have a control bit
and a target bit,

376
00:14:15,531 --> 00:14:19,260
control bit one, we flipped
the other bit. Pretty good?

377
00:14:19,261 --> 00:14:21,870
Now, this is a lot of math

378
00:14:21,871 --> 00:14:24,630
but don't panic we're
gonna go over step-by-step.

379
00:14:24,631 --> 00:14:27,800
If we apply the CNOT gate to 10,

380
00:14:27,801 --> 00:14:30,010
remember that this is
the control bits one,

381
00:14:30,011 --> 00:14:30,970
so we're going to
flip the other bits,

382
00:14:30,971 --> 00:14:32,550
so we expect it to go to 11.

383
00:14:32,551 --> 00:14:34,965
Now, let's expand this
out just step-by-step.

384
00:14:34,966 --> 00:14:37,795
So,10 corresponds to
this tensor product.

385
00:14:37,796 --> 00:14:40,235
This is the matrix
from the previous slide

386
00:14:40,236 --> 00:14:42,105
and we're applying it
to our product state.

387
00:14:42,106 --> 00:14:43,565
Remember, it's
just going to flip

388
00:14:43,566 --> 00:14:46,820
the bottom two rows so we
get to this product state,

389
00:14:46,821 --> 00:14:48,445
which when we factor it out,

390
00:14:48,446 --> 00:14:51,330
indeed gets us 11.

391
00:14:51,331 --> 00:14:55,325
Now, let's do it
with 11, same thing,

392
00:14:55,326 --> 00:14:57,040
we have our familiar matrix,

393
00:14:57,041 --> 00:14:58,130
multiply by this product state,

394
00:14:58,131 --> 00:15:00,640
we go to here, which
we factor into 10.

395
00:15:00,641 --> 00:15:04,730
So, I hope I've convinced
you at this point that we

396
00:15:04,731 --> 00:15:06,315
can use matrices to represent

397
00:15:06,316 --> 00:15:09,615
more interesting logical
operations than just a bit flip.

398
00:15:09,616 --> 00:15:11,585
Has anyone eventually, yes?

399
00:15:11,586 --> 00:15:13,415
>> Is that factoring always

400
00:15:13,416 --> 00:15:15,860
possible or practical
for larger vectors?

401
00:15:15,861 --> 00:15:19,580
>> It is practical, yes.

402
00:15:19,581 --> 00:15:21,480
Not always possible,

403
00:15:21,481 --> 00:15:23,180
which we'll get into

404
00:15:23,181 --> 00:15:24,675
that when we get into
quantum entanglement,

405
00:15:24,676 --> 00:15:28,440
basically, but good question.

406
00:15:28,680 --> 00:15:33,675
So, this is fine for everyone?

407
00:15:33,676 --> 00:15:36,760
Nobody's lost in
the gigantic equations here?

408
00:15:36,761 --> 00:15:40,100
Okay. We're gonna go over
10 then, or sorry, 00.

409
00:15:40,101 --> 00:15:41,580
So, the control bit 0

410
00:15:41,581 --> 00:15:42,410
that means we're going to leave

411
00:15:42,411 --> 00:15:43,675
the other bit alone, right?

412
00:15:43,676 --> 00:15:46,380
And we see that indeed

413
00:15:46,381 --> 00:15:49,740
this is what we do
and same with for 01.

414
00:15:49,741 --> 00:15:53,010
Okay. So, everyone, well,

415
00:15:53,011 --> 00:15:55,465
maybe familiar with
how classical computers

416
00:15:55,466 --> 00:15:56,310
are like real CPU's

417
00:15:56,311 --> 00:15:57,360
there they're all
built on the, sort of,

418
00:15:57,361 --> 00:16:00,720
NAND gate, like everything is
fundamentally built on NAND

419
00:16:00,721 --> 00:16:02,900
and CNOT is kind of

420
00:16:02,901 --> 00:16:05,870
the analogous NAND for
reversible computing.

421
00:16:05,871 --> 00:16:08,470
It's like a really basic thing
that is used to build

422
00:16:08,471 --> 00:16:11,935
up larger and more complicated
logical statements.

423
00:16:11,936 --> 00:16:13,840
So, I'm sure if I
gave you a task,

424
00:16:13,841 --> 00:16:15,620
like build some more complicated

425
00:16:15,621 --> 00:16:17,400
logical formula with CNOT,

426
00:16:17,401 --> 00:16:18,800
you'd probably be able
to do it at this point,

427
00:16:18,801 --> 00:16:19,890
you just like stick
them all together

428
00:16:19,891 --> 00:16:22,565
and eventually comes out.

429
00:16:22,566 --> 00:16:25,250
I will note that it's
not actually universal.

430
00:16:25,251 --> 00:16:27,660
You can't make every logical
function with the CNOT gate.

431
00:16:27,661 --> 00:16:29,610
You need something
called a Toffoli Gate,

432
00:16:29,611 --> 00:16:33,305
but we won't see that
in this presentation.

433
00:16:33,306 --> 00:16:36,880
And we've learned everything
we need to know about how to

434
00:16:36,881 --> 00:16:40,580
use linear algebra to represent
classical computation,

435
00:16:40,581 --> 00:16:42,485
and we can now go on
to quantum computing.

436
00:16:42,486 --> 00:16:43,930
So, to recap, we

437
00:16:43,931 --> 00:16:45,450
learned that we can
represent classical bits

438
00:16:45,451 --> 00:16:48,840
in vector form is 10
for 0 and 01 for 1.

439
00:16:48,841 --> 00:16:51,470
We can represent
operations on bits

440
00:16:51,471 --> 00:16:54,425
by multiplications
on their bit vectors.

441
00:16:54,426 --> 00:16:56,300
We know that quantum
computers only use

442
00:16:56,301 --> 00:16:58,020
reversible operations and in

443
00:16:58,021 --> 00:16:59,565
fact the operations
are their own

444
00:16:59,566 --> 00:17:01,930
inverses and multibit states,

445
00:17:01,931 --> 00:17:04,495
we write is the tensor product
of our single bit states.

446
00:17:04,496 --> 00:17:07,060
Finally, learned
about CNOT which is

447
00:17:07,061 --> 00:17:09,040
a very fundamental gate

448
00:17:09,041 --> 00:17:12,360
in reversible computing
and quantum computing.

449
00:17:12,361 --> 00:17:15,875
So, everyone's
following along so far?

450
00:17:15,876 --> 00:17:18,910
This is pretty simple,
right? And it's not that bad.

451
00:17:18,911 --> 00:17:22,705
Okay. Let's make
the jump, qbits.

452
00:17:22,706 --> 00:17:24,900
And I will surprise
you, we've been learned

453
00:17:24,901 --> 00:17:27,710
using qbits all along actually.

454
00:17:27,711 --> 00:17:32,230
The cbits are just
special cases of qbits.

455
00:17:32,231 --> 00:17:33,990
And we represent
the qbit in general

456
00:17:33,991 --> 00:17:35,850
by a vector of two elements a,

457
00:17:35,851 --> 00:17:38,635
b where a and b are
complex numbers.

458
00:17:38,636 --> 00:17:40,260
Don't worry. We'll only use

459
00:17:40,261 --> 00:17:41,920
real numbers for
this presentation.

460
00:17:41,921 --> 00:17:42,940
We're keeping it simple.

461
00:17:42,941 --> 00:17:44,650
Only using real
numbers. And we have

462
00:17:44,651 --> 00:17:48,115
the constraint that
a squared plus b squared is one.

463
00:17:48,116 --> 00:17:50,825
So, (1,0) and (0,1) fit
this definition because

464
00:17:50,826 --> 00:17:52,060
one squared plus zero squared is

465
00:17:52,061 --> 00:17:55,745
one and zero squared plus
one squared is one, right?

466
00:17:55,746 --> 00:17:58,555
Now, here are
some example qbit values.

467
00:17:58,556 --> 00:18:01,440
This is one with which
you'll become very familiar.

468
00:18:01,441 --> 00:18:03,830
It is one over root
two, one over root two.

469
00:18:03,831 --> 00:18:06,450
Can anyone tell me what one
over root two squared is?

470
00:18:06,451 --> 00:18:07,610
>> One half.

471
00:18:07,611 --> 00:18:08,780
>> One half exactly.

472
00:18:08,781 --> 00:18:11,280
one half plus one half is
one. So, this is a qbit.

473
00:18:11,281 --> 00:18:14,110
What about one half and
root three over two?

474
00:18:14,111 --> 00:18:16,720
What's one half
squared? One quarter.

475
00:18:16,721 --> 00:18:19,475
So, one quarter plus
three quarters is one.

476
00:18:19,476 --> 00:18:21,120
Here's an interesting thing.

477
00:18:21,121 --> 00:18:22,360
We can actually use
negative numbers

478
00:18:22,361 --> 00:18:23,910
now because the negative number

479
00:18:23,911 --> 00:18:24,950
squared is a positive number.

480
00:18:24,951 --> 00:18:26,535
So, negative one squared is one.

481
00:18:26,536 --> 00:18:28,960
One plus zero is one.
And the same thing here,

482
00:18:28,961 --> 00:18:30,750
it's just the same
as this first matrix,

483
00:18:30,751 --> 00:18:34,440
but one of the values is
negative. Pretty neat.

484
00:18:34,441 --> 00:18:37,620
Not bad so far, right?

485
00:18:37,621 --> 00:18:40,960
Okay, but you might say
this is kind of like

486
00:18:40,961 --> 00:18:44,720
saying that a qbit has a value
which is not zero or one,

487
00:18:44,721 --> 00:18:47,855
but actually both zero
and one at the same time.

488
00:18:47,856 --> 00:18:49,585
This is called superposition.

489
00:18:49,586 --> 00:18:50,740
Everyone's probably heard of

490
00:18:50,741 --> 00:18:53,840
the Schrodinger's cat
being both alive and dead.

491
00:18:53,841 --> 00:18:55,650
That's just like a pop science

492
00:18:55,651 --> 00:18:58,015
the way of articulating
this concept sort of.

493
00:18:58,016 --> 00:19:00,570
And the interesting thing

494
00:19:00,571 --> 00:19:02,465
about a qbit being
in superposition,

495
00:19:02,466 --> 00:19:04,460
it means we can kind of,

496
00:19:04,461 --> 00:19:07,260
I want to really qualify
this kind of compute with

497
00:19:07,261 --> 00:19:10,105
the values of both zero
and one at the same time,

498
00:19:10,106 --> 00:19:11,760
which again is the sort of

499
00:19:11,761 --> 00:19:14,210
whisper of some
quantum speedup power.

500
00:19:14,211 --> 00:19:17,760
Okay? Now, how this works is,

501
00:19:17,761 --> 00:19:19,715
when we measure this qbit,

502
00:19:19,716 --> 00:19:22,870
it collapses to
our familiar values

503
00:19:22,871 --> 00:19:25,495
of zero and one with
some probability.

504
00:19:25,496 --> 00:19:27,450
And this is what we
usually do at the end of

505
00:19:27,451 --> 00:19:29,500
a quantum computation
to get the final result.

506
00:19:29,501 --> 00:19:30,665
We send it through
the measurement gate,

507
00:19:30,666 --> 00:19:32,935
we see what the result is.

508
00:19:32,936 --> 00:19:35,050
So, how the
probability works is,

509
00:19:35,051 --> 00:19:36,460
if you have a value (a, b),

510
00:19:36,461 --> 00:19:38,725
it collapses to zero
with probability

511
00:19:38,726 --> 00:19:41,835
a squared mand one with
probability b squared.

512
00:19:41,836 --> 00:19:44,065
So, if we look at

513
00:19:44,066 --> 00:19:46,550
our familiar qbit from previous
slide, one over root two,

514
00:19:46,551 --> 00:19:48,275
one over root two, it has

515
00:19:48,276 --> 00:19:50,500
a one half chance of
collapsing to zero,

516
00:19:50,501 --> 00:19:52,010
and one half chance of
collapsing into one.

517
00:19:52,011 --> 00:19:54,880
It's like a coin-flip. Now, if

518
00:19:54,881 --> 00:19:56,820
we just measure
our classical qbit,

519
00:19:56,821 --> 00:19:59,500
our classical cbits the (1,0)

520
00:19:59,501 --> 00:20:01,855
has a 100 percent chance
of collapsing to zero,

521
00:20:01,856 --> 00:20:04,125
and (0, 1) has a 100 percent
chance collapse into one.

522
00:20:04,126 --> 00:20:07,445
So, it's sort of item
put in that way.

523
00:20:07,446 --> 00:20:10,080
And I found it useful here to

524
00:20:10,081 --> 00:20:11,190
give people sort of physical

525
00:20:11,191 --> 00:20:12,710
intuition about
what we're doing,

526
00:20:12,711 --> 00:20:15,260
what bit is or a qbit is.

527
00:20:15,261 --> 00:20:17,980
If you've heard of polarization,

528
00:20:17,981 --> 00:20:19,665
you've probably bought
fancy sunglasses,

529
00:20:19,666 --> 00:20:20,975
says that they're polarized.

530
00:20:20,976 --> 00:20:23,805
So, polarization is actually
sort of quantum phenomenon.

531
00:20:23,806 --> 00:20:26,815
You can be polarized like
this way or this way,

532
00:20:26,816 --> 00:20:29,810
and your glasses will only
be polarized a certain

533
00:20:29,811 --> 00:20:31,030
way so only let light

534
00:20:31,031 --> 00:20:33,250
polarized in this way
through basically.

535
00:20:33,251 --> 00:20:35,180
It turns out that qbits,

536
00:20:35,181 --> 00:20:38,340
you can think of this, yeah,

537
00:20:38,341 --> 00:20:40,140
a photon being polarized
this way is a zero,

538
00:20:40,141 --> 00:20:42,485
and photon being polarized
this way is a one.

539
00:20:42,486 --> 00:20:45,250
Superposition means it's
actually like both, right?

540
00:20:45,251 --> 00:20:48,165
So, it could actually go
through both gradients.

541
00:20:48,166 --> 00:20:49,620
And then if you measure it,

542
00:20:49,621 --> 00:20:50,740
and a way to measure
it is just to

543
00:20:50,741 --> 00:20:53,640
fire it through grating and
see whether it goes through,

544
00:20:53,641 --> 00:20:55,625
then you can collapse
it to zero or one.

545
00:20:55,626 --> 00:20:57,720
So, that's our intuition

546
00:20:57,721 --> 00:21:00,150
pinning this to
a physical concept.

547
00:21:00,151 --> 00:21:01,510
Of course, modern, we

548
00:21:01,511 --> 00:21:02,860
found that photons
actually make very,

549
00:21:02,861 --> 00:21:05,580
very poor qbits, they tend
to collapse to easily.

550
00:21:05,581 --> 00:21:08,700
So, we don't use those, but
you can maybe think of that.

551
00:21:08,701 --> 00:21:11,970
Does anyone have
any confusion here, really,

552
00:21:11,971 --> 00:21:13,960
about how this measurement

553
00:21:13,961 --> 00:21:16,380
process collapse
probability works?

554
00:21:16,381 --> 00:21:18,205
Okay, great.

555
00:21:18,206 --> 00:21:20,280
We will learn about
multiple qbits.

556
00:21:20,281 --> 00:21:22,960
The same is multiple cbits.

557
00:21:22,961 --> 00:21:24,895
We represent them by
the tensor product.

558
00:21:24,896 --> 00:21:27,855
Why is it doing that?

559
00:21:27,856 --> 00:21:33,995
Okay, hold on, laser pointer.

560
00:21:33,996 --> 00:21:38,515
Okay, there we go.
Nope, that's not.

561
00:21:38,516 --> 00:21:43,655
Okay. So, if we have two qbits,
and we multiply them,

562
00:21:43,656 --> 00:21:49,515
the sum of squares identity
actually is maintained.

563
00:21:49,516 --> 00:21:51,315
And so, if we consider

564
00:21:51,316 --> 00:21:54,410
our perfectly balanced 50
percent coin-flip qbit.

565
00:21:54,411 --> 00:21:57,070
And we tensor with
another coin-flip qbit,

566
00:21:57,071 --> 00:21:59,050
we get this four vector with

567
00:21:59,051 --> 00:22:01,870
one half in every single column,

568
00:22:01,871 --> 00:22:03,785
and one half squared is
of course, one-quarter.

569
00:22:03,786 --> 00:22:05,400
So, one-quarter plus one-quarter

570
00:22:05,401 --> 00:22:06,825
plus one-quarter plus
one-quarter is one.

571
00:22:06,826 --> 00:22:08,420
This maintains the property.

572
00:22:08,421 --> 00:22:10,170
And the way to read this is

573
00:22:10,171 --> 00:22:12,155
when you measure
these two qbits,

574
00:22:12,156 --> 00:22:14,580
it has a one-quarter chance
of collapsing to (0,

575
00:22:14,581 --> 00:22:16,555
0), (0, 1), (1, 0), and (1,1).

576
00:22:16,556 --> 00:22:20,590
This is sort of the probability
of when you measure it,

577
00:22:20,591 --> 00:22:22,010
finding a one there,

578
00:22:22,011 --> 00:22:23,940
and zero everywhere else.

579
00:22:23,941 --> 00:22:25,510
So, we could find,

580
00:22:25,511 --> 00:22:27,180
it's a one-quarter probability
of finding one in

581
00:22:27,181 --> 00:22:29,490
this position and
all zeroes everywhere else.

582
00:22:29,491 --> 00:22:32,660
Does that make sense
for multiple qbits?

583
00:22:32,661 --> 00:22:34,435
Okay great.

584
00:22:34,436 --> 00:22:36,855
You guys are just trucking
along and no problem.

585
00:22:36,856 --> 00:22:38,590
Should be super easy. Yes?

586
00:22:38,591 --> 00:22:39,275
>> I have a question.

587
00:22:39,276 --> 00:22:40,540
>> Absolutely.

588
00:22:40,541 --> 00:22:43,120
>> So, there's only
going to be one,

589
00:22:43,121 --> 00:22:45,080
one left in the vector?

590
00:22:45,081 --> 00:22:45,885
>> Yes.

591
00:22:45,886 --> 00:22:47,250
>> There couldn't be two ones?

592
00:22:47,251 --> 00:22:48,210
>> There could not two ones

593
00:22:48,211 --> 00:22:49,090
because that would
actually violate

594
00:22:49,091 --> 00:22:52,220
our a squared plus b squared
equals one constraint.

595
00:22:52,221 --> 00:22:52,885
>> Okay.

596
00:22:52,886 --> 00:22:56,035
>> But yeah, after measurement
there'll only be one,

597
00:22:56,036 --> 00:22:59,145
one here in this in four vector,

598
00:22:59,146 --> 00:23:01,395
which we can then factor
into two bits actually.

599
00:23:01,396 --> 00:23:03,445
Okay. Yes?

600
00:23:03,446 --> 00:23:06,325
>> You also find collapsing
for that longer vector?

601
00:23:06,326 --> 00:23:08,570
>> Yeah, yeah.

602
00:23:08,571 --> 00:23:11,830
So, if you measure
these two qbits at once,

603
00:23:11,831 --> 00:23:15,520
you can think of this product
state vector is collapsing.

604
00:23:15,521 --> 00:23:18,260
And then that's
just the probability of

605
00:23:18,261 --> 00:23:20,875
finding a one here and
a zero everywhere else.

606
00:23:20,876 --> 00:23:23,660
It'll become useful in
the future when we can't

607
00:23:23,661 --> 00:23:27,495
actually factor out the product
state, but that's anyway.

608
00:23:27,496 --> 00:23:30,790
Okay. How about
operations on qbits?

609
00:23:30,791 --> 00:23:32,445
We have these qbits, how do
we actually manipulate them?

610
00:23:32,446 --> 00:23:34,755
The same way we do with
the classical bits.

611
00:23:34,756 --> 00:23:37,150
And all the matrix
operators we've

612
00:23:37,151 --> 00:23:39,550
learned also work with qbits.

613
00:23:39,551 --> 00:23:42,360
So, for example, negation.

614
00:23:42,361 --> 00:23:43,785
If we have our qbit that has

615
00:23:43,786 --> 00:23:45,730
a 25 percent chance
of collapsing to zero,

616
00:23:45,731 --> 00:23:47,140
75 percent chance
collapse into one,

617
00:23:47,141 --> 00:23:49,480
if we run it through
the bit flip operator,

618
00:23:49,481 --> 00:23:51,715
now it has a 75 percent chance
of collapse into zero,

619
00:23:51,716 --> 00:23:53,420
and 25 percent chance
of collapse into one.

620
00:23:53,421 --> 00:23:55,660
So, we can manipulate
these probabilities actually

621
00:23:55,661 --> 00:23:57,920
called amplitudes with gates.

622
00:23:57,921 --> 00:23:59,820
And you can think of gates,

623
00:23:59,821 --> 00:24:02,520
they correspond to some
device scientists have created

624
00:24:02,521 --> 00:24:05,360
which is like manipulate
the qbits with a gentle touch.

625
00:24:05,361 --> 00:24:06,960
Not enough to collapse them,

626
00:24:06,961 --> 00:24:08,690
but enough to
change their state.

627
00:24:08,691 --> 00:24:11,500
So, pretty neat.

628
00:24:11,501 --> 00:24:15,345
And there are also a couple
important matrix operators,

629
00:24:15,346 --> 00:24:16,630
which we haven't learned
yet because they only

630
00:24:16,631 --> 00:24:18,655
really make sense in
the quantum context.

631
00:24:18,656 --> 00:24:23,840
Okay, all right. We're good.

632
00:24:23,841 --> 00:24:26,885
Then the most important one
is the Hadamard gate.

633
00:24:26,886 --> 00:24:30,395
And what it does is, it
takes a zero or one qbit,

634
00:24:30,396 --> 00:24:32,635
and it takes it to
the coin-flip state

635
00:24:32,636 --> 00:24:35,045
where it's in exactly
equal superposition.

636
00:24:35,046 --> 00:24:36,330
The matrix looks like this.

637
00:24:36,331 --> 00:24:38,395
It as one over root two in

638
00:24:38,396 --> 00:24:39,670
every single entry except

639
00:24:39,671 --> 00:24:41,435
for a negative in
the bottom right corner.

640
00:24:41,436 --> 00:24:43,270
So, if you multiply
that by this,

641
00:24:43,271 --> 00:24:45,175
you get one over root
two, one over root two.

642
00:24:45,176 --> 00:24:47,115
If you multiply this by one,

643
00:24:47,116 --> 00:24:49,135
we get one over root two,
negative one over two.

644
00:24:49,136 --> 00:24:50,720
Pretty neat. So, this is how we

645
00:24:50,721 --> 00:24:52,270
actually get into superposition.

646
00:24:52,271 --> 00:24:53,480
We use the Hadamard device,

647
00:24:53,481 --> 00:24:56,410
which scientists have developed,

648
00:24:56,411 --> 00:25:00,785
and we can make much use of.

649
00:25:00,786 --> 00:25:03,535
So, quiz time.

650
00:25:03,536 --> 00:25:05,970
Can anyone tell me why
we need a negative one in

651
00:25:05,971 --> 00:25:07,665
the bottom right corner?

652
00:25:07,666 --> 00:25:11,270
Why do we need
a negative sign here?

653
00:25:11,271 --> 00:25:20,030
>> It's like a matrix
on bigger provision.

654
00:25:20,031 --> 00:25:23,580
I don't know exactly why,

655
00:25:23,581 --> 00:25:24,840
but it is too big.

656
00:25:24,841 --> 00:25:29,140
>> Well, the answer basically
has to be reversible.

657
00:25:29,141 --> 00:25:31,430
So, if we didn't have
this negative number here,

658
00:25:31,431 --> 00:25:33,610
then both zero and one
would map to the same value,

659
00:25:33,611 --> 00:25:34,885
and it would not be reversible.

660
00:25:34,886 --> 00:25:39,710
So, we need this negative sign.
Yes, correct. Okay.

661
00:25:39,711 --> 00:25:40,690
>> Question.

662
00:25:40,691 --> 00:25:41,540
>> Yes?

663
00:25:41,541 --> 00:25:43,820
>> Review of superposition,

664
00:25:43,821 --> 00:25:45,540
what does that mean exactly?

665
00:25:45,541 --> 00:25:46,820
>> Superposition, yeah.

666
00:25:46,821 --> 00:25:49,655
So, superposition
means that a qbit is

667
00:25:49,656 --> 00:25:52,875
in both states zero and
one at the same time.

668
00:25:52,876 --> 00:25:53,505
>> Okay.

669
00:25:53,506 --> 00:25:56,640
>> And I want to be really
clear about something here.

670
00:25:56,641 --> 00:25:58,630
This doesn't mean
the qbit is secretly

671
00:25:58,631 --> 00:26:00,870
zero or secretly one,
and we don't know.

672
00:26:00,871 --> 00:26:03,720
It means it's actually
in both at the same time,

673
00:26:03,721 --> 00:26:06,105
this is just quantum weirdness.

674
00:26:06,106 --> 00:26:08,060
This is just like what
happens at the very,

675
00:26:08,061 --> 00:26:09,605
very small level of our world,

676
00:26:09,606 --> 00:26:10,790
which is that things don't have

677
00:26:10,791 --> 00:26:13,010
definite values until
we measure them.

678
00:26:13,011 --> 00:26:15,390
>> Here you have (0,

679
00:26:15,391 --> 00:26:18,470
1) in superposition
is one over root two,

680
00:26:18,471 --> 00:26:19,620
one over root two.

681
00:26:19,621 --> 00:26:23,250
And one and superposition
one over root two minus one.

682
00:26:23,251 --> 00:26:23,480
>> Yes.

683
00:26:23,481 --> 00:26:24,600
>> So, we seem to have

684
00:26:24,601 --> 00:26:27,915
different values but they're

685
00:26:27,916 --> 00:26:30,175
representing conceptually
the same thing.

686
00:26:30,176 --> 00:26:32,905
>> Right. So, this

687
00:26:32,906 --> 00:26:35,100
comes down to the distinction

688
00:26:35,101 --> 00:26:36,640
between the quantum
and classical world,.

689
00:26:36,641 --> 00:26:39,025
Which is that from
the classical perspective,

690
00:26:39,026 --> 00:26:40,965
these two qbits are the same.

691
00:26:40,966 --> 00:26:42,540
Both have 50 percent probability

692
00:26:42,541 --> 00:26:43,875
of collapsing to zero or one.

693
00:26:43,876 --> 00:26:46,585
But, if we stay within
the quantum realm,

694
00:26:46,586 --> 00:26:48,760
this sign information is

695
00:26:48,761 --> 00:26:50,730
preserved as long as
we don't measure it,

696
00:26:50,731 --> 00:26:52,520
and it can affect
our computations.

697
00:26:52,521 --> 00:26:56,245
>> So, it's got a 50-50 chance,

698
00:26:56,246 --> 00:27:00,560
but it has a sense that
it used to be a one?

699
00:27:00,561 --> 00:27:03,515
>> Has a sense that
it used to be one?

700
00:27:03,516 --> 00:27:06,690
Not really, it just
ends up in this state,

701
00:27:06,691 --> 00:27:07,970
which is different within

702
00:27:07,971 --> 00:27:09,280
the quantum realm
than this state.

703
00:27:09,281 --> 00:27:10,875
These are two different states.

704
00:27:10,876 --> 00:27:11,425
>> Okay.

705
00:27:11,426 --> 00:27:11,870
>> Yes.

706
00:27:11,871 --> 00:27:13,050
>> Both for the 50-50 chance.

707
00:27:13,051 --> 00:27:14,180
>> Yes, exactly. Both when you

708
00:27:14,181 --> 00:27:15,350
measure it and convert it into

709
00:27:15,351 --> 00:27:18,920
the classical world come
down with a 50-50 chance.

710
00:27:18,921 --> 00:27:20,250
Yes. But they are different,

711
00:27:20,251 --> 00:27:23,435
and they have different
computational properties.

712
00:27:23,436 --> 00:27:25,890
Okay. Now, I'm going
to show you something

713
00:27:25,891 --> 00:27:28,745
really cool about
the Hadamard gate,

714
00:27:28,746 --> 00:27:30,730
which actually takes us out of

715
00:27:30,731 --> 00:27:33,320
superposition into
the classical bits.

716
00:27:33,321 --> 00:27:34,360
This should be unsurprising.

717
00:27:34,361 --> 00:27:36,505
Everything is
its own inverse, right?

718
00:27:36,506 --> 00:27:41,510
If we just apply the Hadamard
gate to our value here,

719
00:27:41,511 --> 00:27:43,675
our coin-flip
value, we get zero.

720
00:27:43,676 --> 00:27:45,960
And for this one, we get one.

721
00:27:45,961 --> 00:27:51,055
So, this suggests to us
a quantum computation structure.

722
00:27:51,056 --> 00:27:53,535
We can start with
our classical bit values.

723
00:27:53,536 --> 00:27:55,085
We put them into superposition,

724
00:27:55,086 --> 00:27:56,975
do a bunch of
quantum stuff to them,

725
00:27:56,976 --> 00:27:58,390
and at the end if we're clever,

726
00:27:58,391 --> 00:28:00,740
we can transition
them to zero or one

727
00:28:00,741 --> 00:28:03,865
so that our whole computation
was deterministic.

728
00:28:03,866 --> 00:28:07,400
Pretty neat, right? Okay. Now, I

729
00:28:07,401 --> 00:28:09,595
should say that not all
algorithms work this way.

730
00:28:09,596 --> 00:28:11,515
There are algorithms
like Shor's algorithm,

731
00:28:11,516 --> 00:28:12,680
which only gives
the right answer

732
00:28:12,681 --> 00:28:13,825
of 50 percent of the time.

733
00:28:13,826 --> 00:28:15,700
You can't be clever and

734
00:28:15,701 --> 00:28:18,555
always get the right answers,
just not doable.

735
00:28:18,556 --> 00:28:20,570
But the one, the problem
we will look at does

736
00:28:20,571 --> 00:28:23,950
give this
deterministic property.

737
00:28:23,951 --> 00:28:28,785
So, does anyone have
trouble with this concept?

738
00:28:28,786 --> 00:28:30,200
We transition out
of superposition

739
00:28:30,201 --> 00:28:31,940
without measurement,
pretty interesting.

740
00:28:31,941 --> 00:28:33,840
>> Can you go over
this transition from

741
00:28:33,841 --> 00:28:36,395
a classical computation to

742
00:28:36,396 --> 00:28:38,210
quantum and then
converting it back?

743
00:28:38,211 --> 00:28:38,700
>> Yes.

744
00:28:38,701 --> 00:28:40,940
>> That's correct.
Let's say two plus two,

745
00:28:40,941 --> 00:28:42,730
how would that look like in?

746
00:28:42,731 --> 00:28:43,330
>> How-?

747
00:28:43,331 --> 00:28:46,445
>> Just the simplest
type of math.

748
00:28:46,446 --> 00:28:48,625
>> The simplest type of math.

749
00:28:48,626 --> 00:28:50,600
What we're going to go
over that basically,

750
00:28:50,601 --> 00:28:52,030
we're going to go
over a problem.

751
00:28:52,031 --> 00:28:55,410
There are certain problems
where computers

752
00:28:55,411 --> 00:28:59,780
are better than classical.
Addition is not one of them.

753
00:28:59,781 --> 00:29:02,110
It works the exact
same way in both.

754
00:29:02,111 --> 00:29:05,790
It should also be said that
all classical computation

755
00:29:05,791 --> 00:29:07,470
can be done on
a quantum computer,

756
00:29:07,471 --> 00:29:08,470
all you do is just restrict

757
00:29:08,471 --> 00:29:09,725
all the values to zero and one,

758
00:29:09,726 --> 00:29:11,810
and it works, but it's

759
00:29:11,811 --> 00:29:13,780
kind of a waste because
you can also use

760
00:29:13,781 --> 00:29:18,625
all the extra values
that we found.

761
00:29:18,626 --> 00:29:20,840
Okay, and we've actually

762
00:29:20,841 --> 00:29:22,030
sort of define
a state machine here,

763
00:29:22,031 --> 00:29:23,725
which I am sure many
of you will appreciate

764
00:29:23,726 --> 00:29:26,260
if you're software engineers
or computer scientists.

765
00:29:26,261 --> 00:29:30,120
This is the unit circle which

766
00:29:30,121 --> 00:29:31,870
many of you will remember from

767
00:29:31,871 --> 00:29:33,705
high school trigonometry, right?

768
00:29:33,706 --> 00:29:36,975
It's a circle of radius
one around the origin.

769
00:29:36,976 --> 00:29:39,460
Here's the X axis,

770
00:29:39,461 --> 00:29:40,845
this is the Y axis.

771
00:29:40,846 --> 00:29:45,320
You can think of
the top value is the value of

772
00:29:45,321 --> 00:29:47,800
the x-value and
the bottom one is the y-value

773
00:29:47,801 --> 00:29:51,140
so our zero value
is at position one,

774
00:29:51,141 --> 00:29:53,300
zero which is along the X axis.

775
00:29:53,301 --> 00:29:54,910
Our one value is position zero,

776
00:29:54,911 --> 00:29:56,540
one which is along the Y axis.

777
00:29:56,541 --> 00:29:58,410
And this is
the bit flip operator,

778
00:29:58,411 --> 00:30:02,070
it defines transitions
around this unit circle.

779
00:30:02,071 --> 00:30:05,365
So zero goes to one,
one goes to zero,

780
00:30:05,366 --> 00:30:08,770
zero negative one
goes to negative one,

781
00:30:08,771 --> 00:30:10,320
zero which when
you collapse them,

782
00:30:10,321 --> 00:30:13,610
this is zero, this is
one, and vice versa.

783
00:30:13,611 --> 00:30:15,510
And if we look at the

784
00:30:15,511 --> 00:30:18,250
superposition values, here's
something interesting.

785
00:30:18,251 --> 00:30:20,640
The bit flip operator

786
00:30:20,641 --> 00:30:22,460
really kind of has
no effect on them.

787
00:30:22,461 --> 00:30:24,050
For this one, if you
flip it upside down

788
00:30:24,051 --> 00:30:27,275
it's stays itself same
with this over here.

789
00:30:27,276 --> 00:30:30,260
This one's kind of interesting
and that it transitions

790
00:30:30,261 --> 00:30:31,770
you all the way
across the unit circle

791
00:30:31,771 --> 00:30:33,950
and we'll make use of that.

792
00:30:33,951 --> 00:30:36,580
But yeah, this is pretty much

793
00:30:36,581 --> 00:30:37,800
the full action of the bit

794
00:30:37,801 --> 00:30:39,310
flip operator on
the unit circle.

795
00:30:39,311 --> 00:30:40,120
I should mention here that if we

796
00:30:40,121 --> 00:30:41,540
were using complex numbers,

797
00:30:41,541 --> 00:30:43,490
this would actually be a sphere.

798
00:30:43,491 --> 00:30:47,100
Much more difficult to sort
of intuitively graphically

799
00:30:47,101 --> 00:30:48,770
represent so we're sticking with

800
00:30:48,771 --> 00:30:51,310
real numbers, they
suit us just fine.

801
00:30:51,311 --> 00:30:54,390
But it's nice to know that
additional dimension is always

802
00:30:54,391 --> 00:30:55,400
available to us if we want to

803
00:30:55,401 --> 00:30:56,915
make our computation
even more powerful.

804
00:30:56,916 --> 00:30:58,600
And then here's the action
of the Hadamard gate,

805
00:30:58,601 --> 00:31:00,150
which we saw in
the past couple slides.

806
00:31:00,151 --> 00:31:02,640
It takes us from
zero to one over two,

807
00:31:02,641 --> 00:31:04,790
one over two, one, two,

808
00:31:04,791 --> 00:31:05,900
one over two negative
one over two,

809
00:31:05,901 --> 00:31:07,470
and kind of symmetrically,

810
00:31:07,471 --> 00:31:09,655
it also works in
this way over here.

811
00:31:09,656 --> 00:31:12,080
So, we have a nice state machine
that we've developed and

812
00:31:12,081 --> 00:31:14,140
now we can start running
things on the state machine.

813
00:31:14,141 --> 00:31:15,840
Very nice intuitive
sort of representation,

814
00:31:15,841 --> 00:31:18,155
you don't need to do matrix
multiplication all the time.

815
00:31:18,156 --> 00:31:21,305
Everyone kind of gets this?

816
00:31:21,306 --> 00:31:24,790
Okay, great. So here's

817
00:31:24,791 --> 00:31:25,770
an example of something we

818
00:31:25,771 --> 00:31:27,190
could run through
the state machine.

819
00:31:27,191 --> 00:31:29,055
Here, I'm introducing
something called

820
00:31:29,056 --> 00:31:31,035
quantum circuit notation.

821
00:31:31,036 --> 00:31:33,220
You can think of
the cubit traveling along

822
00:31:33,221 --> 00:31:36,170
this line has these
operations applied to it,

823
00:31:36,171 --> 00:31:37,670
is it goes through the boxes.

824
00:31:37,671 --> 00:31:39,145
So X is bit flip,

825
00:31:39,146 --> 00:31:41,810
H is Haddamard, and then
so we go a bit flip,

826
00:31:41,811 --> 00:31:42,980
Haddamard, and
bit flip, Haddamard,

827
00:31:42,981 --> 00:31:45,830
bit flip and if
we start out here,

828
00:31:45,831 --> 00:31:48,295
we go bit flip, Haddamard,

829
00:31:48,296 --> 00:31:50,830
bit flip, Haddamard, bit flip.

830
00:31:50,831 --> 00:31:51,910
So we start off at one,

831
00:31:51,911 --> 00:31:53,210
zero and get to zero,

832
00:31:53,211 --> 00:31:54,790
one, we got to cross the circle.

833
00:31:54,791 --> 00:31:56,550
And note, this is
reversible so we can

834
00:31:56,551 --> 00:31:58,765
also go this way and get back.

835
00:31:58,766 --> 00:32:00,930
So this is kind of how we'll

836
00:32:00,931 --> 00:32:06,740
be doing all of our computations
like this basically,

837
00:32:06,741 --> 00:32:09,370
just hopping around
the unit circle.

838
00:32:09,371 --> 00:32:10,885
It's pretty simple,
pretty intuitive, right?

839
00:32:10,886 --> 00:32:12,210
It's just a state machine.

840
00:32:12,211 --> 00:32:15,005
We use this in classical
computing all the time.

841
00:32:15,006 --> 00:32:17,250
Just has a bit of
weird rules with

842
00:32:17,251 --> 00:32:19,085
the claps and whatever
but don't worry.

843
00:32:19,086 --> 00:32:22,020
Okay, now we have everything we

844
00:32:22,021 --> 00:32:23,950
need to learn
the simplest problem

845
00:32:23,951 --> 00:32:24,750
where a quantum computer

846
00:32:24,751 --> 00:32:26,070
outperforms
a classical computer.

847
00:32:26,071 --> 00:32:28,895
We learn that Cbits are
just a special case of Qbits,

848
00:32:28,896 --> 00:32:30,460
and Qbits are two vectors of

849
00:32:30,461 --> 00:32:31,380
complex numbers such that

850
00:32:31,381 --> 00:32:33,335
a squared plus b
squared equals one.

851
00:32:33,336 --> 00:32:35,715
Within the Qbits is going
to be in superposition,

852
00:32:35,716 --> 00:32:37,445
they're probabilistically
collapsed

853
00:32:37,446 --> 00:32:38,840
to Cbits by measurement.

854
00:32:38,841 --> 00:32:41,170
Multi-Qbits systems we
learned are tensor products of

855
00:32:41,171 --> 00:32:43,775
single Qbit systems
same as with Cbits.

856
00:32:43,776 --> 00:32:47,115
Matrices, again, represent
operations on Qbits,

857
00:32:47,116 --> 00:32:48,500
and we learn about
the Hadamard gate,

858
00:32:48,501 --> 00:32:49,960
very important which takes

859
00:32:49,961 --> 00:32:52,880
our zero and one bits to
superposition and back.

860
00:32:52,881 --> 00:32:54,920
And finally, we learned

861
00:32:54,921 --> 00:32:56,520
that we can think of Qbits
in their operations is

862
00:32:56,521 --> 00:32:58,090
forming the state machine
on the unit circle or

863
00:32:58,091 --> 00:33:00,040
unit sphere if we're
using complex numbers.

864
00:33:00,041 --> 00:33:01,400
It's actually called
the bloch sphere,

865
00:33:01,401 --> 00:33:06,890
if you want to look that up
for the full complex numbers,

866
00:33:06,891 --> 00:33:09,605
but unit circle,
just fine for us.

867
00:33:09,606 --> 00:33:12,740
Okay, so we're gonna

868
00:33:12,741 --> 00:33:14,840
learn about something
called the Deutsch oracle.

869
00:33:14,841 --> 00:33:18,570
This is originally proposed
by David Deutsch in,

870
00:33:18,571 --> 00:33:21,120
was it like 83 or
something like that?

871
00:33:21,121 --> 00:33:22,955
And the problem is this.

872
00:33:22,956 --> 00:33:23,640
Imagine I show up at

873
00:33:23,641 --> 00:33:25,765
your doorstep and I
give you a package,

874
00:33:25,766 --> 00:33:27,630
the package is
just this black box,

875
00:33:27,631 --> 00:33:29,110
it's just horribly present.

876
00:33:29,111 --> 00:33:32,260
It's a black box which
has a function on one bit.

877
00:33:32,261 --> 00:33:33,460
There's one of
those four functions

878
00:33:33,461 --> 00:33:34,810
on one bit, do you
remember what those are?

879
00:33:34,811 --> 00:33:39,090
I said I would ask you
about them. Set zero,

880
00:33:39,091 --> 00:33:40,440
set one, identity, indication.

881
00:33:40,441 --> 00:33:42,845
Exactly. So one of
those four functions,

882
00:33:42,846 --> 00:33:45,380
I don't tell you which one
is inside this black box.

883
00:33:45,381 --> 00:33:47,420
There's a wire going in and
a wire going out so you can

884
00:33:47,421 --> 00:33:49,635
send in values see
where it goes out,

885
00:33:49,636 --> 00:33:53,340
but you can actually look
inside the black box, okay?

886
00:33:53,341 --> 00:33:56,110
So how many queries

887
00:33:56,111 --> 00:33:58,900
on a classical computer
would it take to figure out

888
00:33:58,901 --> 00:34:03,740
which function is inside
the black box? Two, exactly.

889
00:34:03,741 --> 00:34:05,730
You send in zero,
see what comes out,

890
00:34:05,731 --> 00:34:07,170
you send in one,
see what comes out.

891
00:34:07,171 --> 00:34:10,085
So that will uniquely
identify which function it is.

892
00:34:10,086 --> 00:34:11,440
Now, how many queries
do you think it

893
00:34:11,441 --> 00:34:13,530
takes on a quantum computer.

894
00:34:13,531 --> 00:34:16,965
You're wrong, it's two.

895
00:34:16,966 --> 00:34:21,220
I say this to illustrate
an important point,

896
00:34:21,221 --> 00:34:22,655
which is quantum computers,

897
00:34:22,656 --> 00:34:26,405
they don't really compute
with all value simultaneously.

898
00:34:26,406 --> 00:34:28,290
At the end of
the day, you collapse

899
00:34:28,291 --> 00:34:30,785
your Qbit to a single bit
of information,

900
00:34:30,786 --> 00:34:32,750
and a single bit of
information is not enough to

901
00:34:32,751 --> 00:34:35,270
uniquely identify one of
four functions, right?

902
00:34:35,271 --> 00:34:37,650
You need two bits at least So

903
00:34:37,651 --> 00:34:40,370
this actually takes two queries
on a quantum computer.

904
00:34:40,371 --> 00:34:42,605
Well I'm not too
exciting so far.

905
00:34:42,606 --> 00:34:45,470
Now, what if instead

906
00:34:45,471 --> 00:34:47,090
of not wanting to know
which function it is,

907
00:34:47,091 --> 00:34:48,230
we just want to know
whether the function

908
00:34:48,231 --> 00:34:50,035
is constant or variable.

909
00:34:50,036 --> 00:34:51,840
The constant functions are,

910
00:34:51,841 --> 00:34:52,750
constant zero, constant one,

911
00:34:52,751 --> 00:34:54,280
they're always mapped to
0, always mapped to one.

912
00:34:54,281 --> 00:34:57,825
The variable functions
our identity and negation.

913
00:34:57,826 --> 00:35:00,060
So how many queries would this

914
00:35:00,061 --> 00:35:01,670
take on a classical computer?

915
00:35:01,671 --> 00:35:03,535
>> Two.

916
00:35:03,536 --> 00:35:06,260
>> Two. You put in zero,

917
00:35:06,261 --> 00:35:07,650
if you get zero you
don't know whether

918
00:35:07,651 --> 00:35:09,085
it's identity or constant zero.

919
00:35:09,086 --> 00:35:10,660
If you get one, you don't
know whether it's bit

920
00:35:10,661 --> 00:35:12,720
flip or constant one,

921
00:35:12,721 --> 00:35:14,370
symmetrically with
one, so it always takes

922
00:35:14,371 --> 00:35:16,625
two queries on
a classical computer.

923
00:35:16,626 --> 00:35:18,120
Even though there
are two categories,

924
00:35:18,121 --> 00:35:20,080
so really we only
need a single bit

925
00:35:20,081 --> 00:35:22,400
of information to tell us
which category it's in.

926
00:35:22,401 --> 00:35:25,240
But how many queries

927
00:35:25,241 --> 00:35:27,270
do you think it takes
on a quantum computer?

928
00:35:27,271 --> 00:35:30,380
I kind of burned you last time
so maybe you're a bit shy.

929
00:35:30,381 --> 00:35:31,570
>>I'm going for a one.

930
00:35:31,571 --> 00:35:33,040
One, you are correct.

931
00:35:33,041 --> 00:35:36,520
We can do this in a single query
on a quantum computer.

932
00:35:36,521 --> 00:35:38,400
We can tell whether
its constants or variable.

933
00:35:38,401 --> 00:35:40,310
This like undeniably outperforms

934
00:35:40,311 --> 00:35:42,655
a classical computer and
we're going to learn how.

935
00:35:42,656 --> 00:35:46,060
Okay, we do with the magic
of superposition.

936
00:35:46,061 --> 00:35:48,635
But first we have to define

937
00:35:48,636 --> 00:35:51,175
which each of
those four functions

938
00:35:51,176 --> 00:35:52,660
look like on a quantum computer.

939
00:35:52,661 --> 00:35:54,525
We have an instant
obvious problem

940
00:35:54,526 --> 00:35:55,770
with the constant functions.

941
00:35:55,771 --> 00:35:56,780
Can anyone tell me what it is?

942
00:35:56,781 --> 00:35:57,710
>> Not reversible.

943
00:35:57,711 --> 00:35:59,190
>> They're not reversible,

944
00:35:59,191 --> 00:36:00,475
how are we going to write

945
00:36:00,476 --> 00:36:03,365
these non-reversible functions
on a reversible computer?

946
00:36:03,366 --> 00:36:04,980
This is actually a really common

947
00:36:04,981 --> 00:36:06,440
problem in quantum computation.

948
00:36:06,441 --> 00:36:08,370
You really often
have to deal with

949
00:36:08,371 --> 00:36:09,600
non-reversible functions if you

950
00:36:09,601 --> 00:36:11,045
have to write them in
an irreversible way,

951
00:36:11,046 --> 00:36:13,175
and the hack we do is this.

952
00:36:13,176 --> 00:36:15,660
So originally we
had this, right.

953
00:36:15,661 --> 00:36:16,880
We add an input and an output,

954
00:36:16,881 --> 00:36:17,860
a single wire going through.

955
00:36:17,861 --> 00:36:20,300
And we just imagine
that you put in

956
00:36:20,301 --> 00:36:21,840
the value and you
get the function

957
00:36:21,841 --> 00:36:23,220
applied to that value, right?

958
00:36:23,221 --> 00:36:25,750
But the hack that you always
do on quantum computers

959
00:36:25,751 --> 00:36:28,650
is you add an
additional output Qbit.

960
00:36:28,651 --> 00:36:30,100
So you actually have two Qbits.

961
00:36:30,101 --> 00:36:32,030
We have to rewire our black box.

962
00:36:32,031 --> 00:36:34,635
So you have your input
Qbit, which is unchanged,

963
00:36:34,636 --> 00:36:36,920
and then the value of
the function on the input

964
00:36:36,921 --> 00:36:39,782
Qbit is written to
the output Qbit.

965
00:36:39,783 --> 00:36:41,995
Does everyone kind of get this.

966
00:36:41,996 --> 00:36:43,815
I think this the thing
that people have

967
00:36:43,816 --> 00:36:46,185
the most trouble with,
this is necessity.

968
00:36:46,186 --> 00:36:47,750
The reason we have to do this,

969
00:36:47,751 --> 00:36:49,295
is so we can write
non-reversible

970
00:36:49,296 --> 00:36:50,975
functions in a reversible way.

971
00:36:50,976 --> 00:36:53,105
And the way you do that is to

972
00:36:53,106 --> 00:36:56,250
have a separate input
and output qubit.

973
00:36:56,251 --> 00:36:59,160
So when you see
larger quantum computations,

974
00:36:59,161 --> 00:37:01,535
instead of having all the bits

975
00:37:01,536 --> 00:37:02,645
go in and have transformations

976
00:37:02,646 --> 00:37:03,955
applied to them and
then being measured.

977
00:37:03,956 --> 00:37:06,750
You usually have
a separate set of output bits,

978
00:37:06,751 --> 00:37:08,330
so the input bits go in,

979
00:37:08,331 --> 00:37:10,565
they have their value sort of
written to the output bits,

980
00:37:10,566 --> 00:37:11,935
and you measure the output bits.

981
00:37:11,936 --> 00:37:16,685
This is a very standard way
of doing quantum computation.

982
00:37:16,686 --> 00:37:18,205
So does anyone have
any trouble with this?

983
00:37:18,206 --> 00:37:19,975
This is a very difficult
concept. So, yes?

984
00:37:19,976 --> 00:37:21,000
>> I didn't get it.

985
00:37:21,001 --> 00:37:24,735
>> Okay.

986
00:37:24,736 --> 00:37:26,985
So, do you understand
this model basically,

987
00:37:26,986 --> 00:37:28,260
this is what we have now, okay?

988
00:37:28,261 --> 00:37:30,870
So we need to rewire it

989
00:37:30,871 --> 00:37:35,690
so there are two wires
going through the box now.

990
00:37:35,691 --> 00:37:38,900
And one of those wires
we call the input wire,

991
00:37:38,901 --> 00:37:40,785
one of those wires we
call the output wire.

992
00:37:40,786 --> 00:37:42,155
We assume the output wires just

993
00:37:42,156 --> 00:37:44,425
initialize to zero,right?
It's always zero.

994
00:37:44,426 --> 00:37:47,785
Now our input wire is what we
actually give our input in.

995
00:37:47,786 --> 00:37:49,925
Like it'd be like zero or
one or whatever value

996
00:37:49,926 --> 00:37:51,590
you want to give
input to the function.

997
00:37:51,591 --> 00:37:54,950
So, it goes to the box,
it's just unchanged.

998
00:37:54,951 --> 00:37:57,610
We don't touch the value
of the input wire,

999
00:37:57,611 --> 00:38:00,980
but we calculate
the function in here,

1000
00:38:00,981 --> 00:38:02,595
on this input and then we write

1001
00:38:02,596 --> 00:38:07,145
its value to
the output wire, okay?

1002
00:38:07,146 --> 00:38:08,645
>> Black box?

1003
00:38:08,646 --> 00:38:12,400
>> Yes, we are
rewiring the black box.

1004
00:38:12,401 --> 00:38:13,940
We have to rewire
the black box in

1005
00:38:13,941 --> 00:38:15,355
order for the black box
to really work.

1006
00:38:15,356 --> 00:38:18,830
So the black box I gave
you has to be rewired. Yes.

1007
00:38:18,831 --> 00:38:21,495
>> Did you use the first input,

1008
00:38:21,496 --> 00:38:22,965
which is the output of zero?

1009
00:38:22,966 --> 00:38:25,050
>> Did I use the first input?

1010
00:38:25,051 --> 00:38:28,475
>> Yeah, because one of them
was kind of identity, right?

1011
00:38:28,476 --> 00:38:31,755
You put the X out, and
then it was the F or X.

1012
00:38:31,756 --> 00:38:34,370
>> One of them was
X and the other was

1013
00:38:34,371 --> 00:38:38,800
>> You need the X out.

1014
00:38:38,801 --> 00:38:41,245
>> Say we only have this,

1015
00:38:41,246 --> 00:38:42,795
right? This is
the old way of doing it.

1016
00:38:42,796 --> 00:38:47,000
We can't have a non-reversible
function in here, right?

1017
00:38:47,001 --> 00:38:48,115
For it to be on
the quantum field.

1018
00:38:48,116 --> 00:38:49,075
>> No, that I get, right?

1019
00:38:49,076 --> 00:38:49,555
>> Okay, yes.

1020
00:38:49,556 --> 00:38:51,555
>> Because when that thing
is on the right side,

1021
00:38:51,556 --> 00:38:53,345
you have two going
in, two going out.

1022
00:38:53,346 --> 00:38:54,675
>> Yes, two going in,
two going out, yes.

1023
00:38:54,676 --> 00:38:56,440
>> I get why two going out.

1024
00:38:56,441 --> 00:38:56,845
>> Yes.

1025
00:38:56,846 --> 00:38:59,765
>> I don't get why we have
that zero is also going in,

1026
00:38:59,766 --> 00:39:01,340
It doesn't seem that
you're actually using

1027
00:39:01,341 --> 00:39:03,285
it to produce any of the others.

1028
00:39:03,286 --> 00:39:05,700
>> You're correct,
it's just we need.

1029
00:39:05,701 --> 00:39:07,990
>> Symmetry?

1030
00:39:07,991 --> 00:39:09,485
>> Not really symmetry,

1031
00:39:09,486 --> 00:39:12,685
it's just like how we would
write the quantum circuit,

1032
00:39:12,686 --> 00:39:15,655
we would need
two qubits in general.

1033
00:39:15,656 --> 00:39:18,335
So, you're correct that

1034
00:39:18,336 --> 00:39:19,965
this algorithm value
isn't really used.

1035
00:39:19,966 --> 00:39:22,505
>> Is it like we
don't care a pen off?

1036
00:39:22,506 --> 00:39:26,565
>> No, we do want it to
be zero because the way

1037
00:39:26,566 --> 00:39:28,555
that we write
the circuit assumes that

1038
00:39:28,556 --> 00:39:31,090
this value coming in
is always zero. Yes.

1039
00:39:31,091 --> 00:39:35,155
>> Why is it ingoing
output wire called output.

1040
00:39:35,156 --> 00:39:36,860
>> What?

1041
00:39:36,861 --> 00:39:39,055
Yeah. So, this is
kind of weird that

1042
00:39:39,056 --> 00:39:42,095
the output of the input
is called input.

1043
00:39:42,096 --> 00:39:46,720
But, we basically only really
look at this value here,

1044
00:39:46,721 --> 00:39:48,215
is the basic idea.

1045
00:39:48,216 --> 00:39:49,715
This is like the real output.

1046
00:39:49,716 --> 00:39:52,130
The input will
always be unchanged.

1047
00:39:52,131 --> 00:39:53,915
>> Question. So if I have

1048
00:39:53,916 --> 00:39:57,510
multis two black
boxes in series,

1049
00:39:57,511 --> 00:40:03,830
the upper input which
you have labeled Alvap.

1050
00:40:03,831 --> 00:40:05,445
>> That's smart,
that's a good one.

1051
00:40:05,446 --> 00:40:08,025
>> And the second stage
would be the F of

1052
00:40:08,026 --> 00:40:10,920
X output of the first stage?

1053
00:40:10,921 --> 00:40:13,910
>> Okay, so you're
saying if you had

1054
00:40:13,911 --> 00:40:15,885
these in series
rather than sort of in

1055
00:40:15,886 --> 00:40:17,735
parallel to what we're doing
is that what you'resaying?

1056
00:40:17,736 --> 00:40:19,765
>> Yeah I want to
do two operations

1057
00:40:19,766 --> 00:40:21,865
one and then another one.

1058
00:40:21,866 --> 00:40:25,145
And the black box is
doing some operation.

1059
00:40:25,146 --> 00:40:27,695
>> The black box is
doing some operation.

1060
00:40:27,696 --> 00:40:29,615
You can have as many
operations as you want

1061
00:40:29,616 --> 00:40:31,460
in here inside
this black box basically.

1062
00:40:31,461 --> 00:40:33,815
>> True, but I'm trying to

1063
00:40:33,816 --> 00:40:36,495
conceptually
understand whether I

1064
00:40:36,496 --> 00:40:39,215
would take the F of X is
the output upper right.

1065
00:40:39,216 --> 00:40:41,775
And that will be the input.

1066
00:40:41,776 --> 00:40:43,510
>> The input, the next one.

1067
00:40:43,511 --> 00:40:45,550
>> Absolutely and in fact I

1068
00:40:45,551 --> 00:40:48,525
said that this black-box
assumes this value is zero,

1069
00:40:48,526 --> 00:40:49,900
this isn't maybe throw
in a bit much of you,

1070
00:40:49,901 --> 00:40:53,145
but actually we can break
that assumption and send it

1071
00:40:53,146 --> 00:40:55,195
some other value which maybe

1072
00:40:55,196 --> 00:40:56,335
will get us more information

1073
00:40:56,336 --> 00:40:58,410
which is in fact
what we'll be doing.

1074
00:40:58,411 --> 00:41:01,795
So, the working of black box

1075
00:41:01,796 --> 00:41:05,935
assumes that the
output input is zero,

1076
00:41:05,936 --> 00:41:07,905
but we can break
that assumption and be tricky.

1077
00:41:07,906 --> 00:41:09,880
>> My way of
thinking was I didn't

1078
00:41:09,881 --> 00:41:12,275
have any other value
for the first stage,

1079
00:41:12,276 --> 00:41:16,060
but for subsequent inputs
I do have one.

1080
00:41:16,061 --> 00:41:17,305
So I could use it if I want?

1081
00:41:17,306 --> 00:41:19,175
>> Yeah you could, yeah and you

1082
00:41:19,176 --> 00:41:21,460
might get some interesting
values which actually well.

1083
00:41:21,461 --> 00:41:23,490
Okay I swear, this is

1084
00:41:23,491 --> 00:41:24,630
the most difficult part

1085
00:41:24,631 --> 00:41:26,495
conceptually of
this entire presentation.

1086
00:41:26,496 --> 00:41:29,465
So if anyone has any trouble
with it please let me know.

1087
00:41:29,466 --> 00:41:30,685
Ask any questions you can spend

1088
00:41:30,686 --> 00:41:32,895
as longer time on
this as we want. Yes

1089
00:41:32,896 --> 00:41:34,435
>> As we go ahead, is there

1090
00:41:34,436 --> 00:41:37,915
some additional clarifications
because I didn't get it.

1091
00:41:37,916 --> 00:41:40,135
>> Okay. Well we'll
go over all each of

1092
00:41:40,136 --> 00:41:43,775
the four functions in this way,
so maybe that will help.

1093
00:41:43,776 --> 00:41:48,380
So, for example, constant
zero, here's how it would look.

1094
00:41:48,381 --> 00:41:51,000
X goes in, X goes
out it's unchanged.

1095
00:41:51,001 --> 00:41:54,465
Now, the output is always
going to be zero, right?

1096
00:41:54,466 --> 00:41:56,315
That's just what
the constant zero does.

1097
00:41:56,316 --> 00:41:58,685
So we always want this value

1098
00:41:58,686 --> 00:42:00,030
in the upper right to be zero.

1099
00:42:00,031 --> 00:42:01,945
If we assume zero goes in,

1100
00:42:01,946 --> 00:42:03,825
this is our circuit diagram,

1101
00:42:03,826 --> 00:42:07,780
neither of the two wires make
any modifications, right?

1102
00:42:07,781 --> 00:42:10,270
It's a straight wire.

1103
00:42:10,271 --> 00:42:13,355
Does that sort of makes sense?

1104
00:42:13,356 --> 00:42:15,735
We will see the next slide,

1105
00:42:15,736 --> 00:42:17,405
what about for constant one?

1106
00:42:17,406 --> 00:42:20,425
We want one to go
out here, right?

1107
00:42:20,426 --> 00:42:23,045
This is our function
output value.

1108
00:42:23,046 --> 00:42:24,805
And we assume zero
is the input here.

1109
00:42:24,806 --> 00:42:28,075
All we do is we do
a bit flip right here,

1110
00:42:28,076 --> 00:42:31,950
and that gets us
the semantics we want.

1111
00:42:31,951 --> 00:42:34,880
Is anyone having any trouble
with this so far?

1112
00:42:34,881 --> 00:42:37,185
I swear this is
the most difficult part.

1113
00:42:37,186 --> 00:42:39,700
So if you get this
you're golden. Yeah.

1114
00:42:39,701 --> 00:42:42,095
>> So these labels
output, input,

1115
00:42:42,096 --> 00:42:43,165
would you call them something

1116
00:42:43,166 --> 00:42:44,875
like computations and its spare?

1117
00:42:44,876 --> 00:42:47,075
>> Sure yeah, you could.

1118
00:42:47,076 --> 00:42:49,165
You can call it the
compute and the spare fit.

1119
00:42:49,166 --> 00:42:52,485
Yeah, that also
works.They might reduce

1120
00:42:52,486 --> 00:42:54,520
some confusion about there being

1121
00:42:54,521 --> 00:42:57,505
an open output and input output.

1122
00:42:57,506 --> 00:43:00,670
>>Why is it called output?

1123
00:43:00,671 --> 00:43:03,285
>> Why is it called output?

1124
00:43:03,286 --> 00:43:04,925
We call this the upper
qubit because it's

1125
00:43:04,926 --> 00:43:09,770
just the place that we write
the output of the function.

1126
00:43:09,771 --> 00:43:13,025
But we could call
it like compute

1127
00:43:13,026 --> 00:43:15,440
and spare or something like
that, like he suggested.

1128
00:43:15,441 --> 00:43:18,295
Like this would be
the spare sort of bit that we

1129
00:43:18,296 --> 00:43:21,870
write the function number 2. Yes

1130
00:43:21,871 --> 00:43:23,985
>> We need this to do
a reversible computation,

1131
00:43:23,986 --> 00:43:26,370
right why is this?

1132
00:43:26,371 --> 00:43:27,085
>> Reversible?

1133
00:43:27,086 --> 00:43:29,035
>> Can we compare
the reversibility of

1134
00:43:29,036 --> 00:43:31,600
this likewise the right
one reversible one?

1135
00:43:31,601 --> 00:43:32,960
>> Absolutely, okay.

1136
00:43:32,961 --> 00:43:37,880
So let's consider this one
right here, right?

1137
00:43:37,881 --> 00:43:40,205
We have our black box with

1138
00:43:40,206 --> 00:43:42,655
a single wire and

1139
00:43:42,656 --> 00:43:44,750
say we want to do
the bit flip operator.

1140
00:43:44,751 --> 00:43:46,630
So, that would just be.

1141
00:43:46,631 --> 00:43:48,765
Sorry not with
bit flip operator,

1142
00:43:48,766 --> 00:43:49,980
a bit flip operator
is reversible.

1143
00:43:49,981 --> 00:43:53,185
So we want to do
the constant zero operator.

1144
00:43:53,186 --> 00:43:54,930
We always want to
map this to zero.

1145
00:43:54,931 --> 00:43:56,495
So you need some operation right

1146
00:43:56,496 --> 00:43:58,415
here, that would
map this to zero.

1147
00:43:58,416 --> 00:44:01,560
But it'll be the matrix

1148
00:44:01,561 --> 00:44:04,265
1100 but this is

1149
00:44:04,266 --> 00:44:07,355
not a valid operator
in a quantum computer,

1150
00:44:07,356 --> 00:44:09,390
because it's not reversible.

1151
00:44:09,391 --> 00:44:12,115
So, does that kinda makes sense?

1152
00:44:12,116 --> 00:44:14,570
It's just we can't construct
a device which does this.

1153
00:44:14,571 --> 00:44:17,530
It's just not permitted
by physical reality.

1154
00:44:17,531 --> 00:44:19,005
All this math and
stuff I'm showing you,

1155
00:44:19,006 --> 00:44:20,825
it's not like special it's just,

1156
00:44:20,826 --> 00:44:23,005
we found that it corresponds to

1157
00:44:23,006 --> 00:44:25,475
the semantics and workings
of a quantum system,

1158
00:44:25,476 --> 00:44:28,995
and so it's a nice way to
reason about it basically.

1159
00:44:28,996 --> 00:44:32,115
Okay. Of course if we

1160
00:44:32,116 --> 00:44:36,145
want to write constant
zero here with

1161
00:44:36,146 --> 00:44:40,170
their two inputs are

1162
00:44:40,171 --> 00:44:44,830
the two wire model it
would just be blank, right?

1163
00:44:44,831 --> 00:44:49,405
Or if we want to do this is

1164
00:44:49,406 --> 00:44:51,150
constant one always maps to

1165
00:44:51,151 --> 00:44:54,845
one we saw that this
has an X gate here.

1166
00:44:54,846 --> 00:44:57,910
And this is reversible, right?

1167
00:44:57,911 --> 00:45:00,090
Okay. So we managed to write

1168
00:45:00,091 --> 00:45:01,885
a non-reversible function
in a reversible way.

1169
00:45:01,886 --> 00:45:04,105
If you've got
this congratulations,

1170
00:45:04,106 --> 00:45:05,425
this is the trickiest part.

1171
00:45:05,426 --> 00:45:07,155
It took me awhile to
figure out why we needed to

1172
00:45:07,156 --> 00:45:08,975
do this staring at the textbook.

1173
00:45:08,976 --> 00:45:11,105
Does anyone have
any confusion here?

1174
00:45:11,106 --> 00:45:16,165
Okay. So remember constants
zero is just blank.

1175
00:45:16,166 --> 00:45:19,665
Constant one has
a single X gate. Yes.

1176
00:45:19,666 --> 00:45:20,845
>> There's a point
you always end up with

1177
00:45:20,846 --> 00:45:22,955
a four by four reversible matrix

1178
00:45:22,956 --> 00:45:25,365
by doing this in black box?

1179
00:45:25,366 --> 00:45:27,465
>> Yes. Black box
is always a four by

1180
00:45:27,466 --> 00:45:28,605
four reversible
matrix applied to

1181
00:45:28,606 --> 00:45:30,290
a product state, you're correct.

1182
00:45:30,291 --> 00:45:32,265
Although we will be not going

1183
00:45:32,266 --> 00:45:33,765
into the math in that way
we'll just be using

1184
00:45:33,766 --> 00:45:36,850
the state machine to look at it,

1185
00:45:36,851 --> 00:45:39,565
but the math is very easy
for you to do it yourself.

1186
00:45:39,566 --> 00:45:42,975
Okay. So let's look at
identity this is a bit more

1187
00:45:42,976 --> 00:45:46,625
complicated this is
the CNOT gate, okay?

1188
00:45:46,626 --> 00:45:51,080
Where this is the control,
and this is the target.

1189
00:45:51,081 --> 00:45:53,505
So we'll end up with,

1190
00:45:53,506 --> 00:45:55,395
so input again is unchanged.

1191
00:45:55,396 --> 00:45:57,475
We want output we
assume it zero we

1192
00:45:57,476 --> 00:45:59,910
want to end up with
a value X, right?

1193
00:45:59,911 --> 00:46:02,280
So if zero is sent in here,

1194
00:46:02,281 --> 00:46:04,915
then this is the control bit,

1195
00:46:04,916 --> 00:46:06,365
so the target bit is
just left unchanged,

1196
00:46:06,366 --> 00:46:08,270
right? So zero comes out.

1197
00:46:08,271 --> 00:46:10,965
If one is here, one is sent in,

1198
00:46:10,966 --> 00:46:14,110
and the control bits
one so we flip thright?

1199
00:46:14,111 --> 00:46:16,810
Is bit, and we end up with one.

1200
00:46:16,811 --> 00:46:19,105
Does this make sense?
This is kind of

1201
00:46:19,106 --> 00:46:21,660
tricky it is a big step up
in complexity of our circuit,

1202
00:46:21,661 --> 00:46:23,825
but everyone's fine with this?

1203
00:46:23,826 --> 00:46:28,785
Wow okay. Can anyone guess
how will do negation?

1204
00:46:31,615 --> 00:46:35,895
>> You can hardset
the control bit to one.

1205
00:46:35,896 --> 00:46:39,225
>> How can we hardset
control bit to one?

1206
00:46:39,226 --> 00:46:41,415
>> Two controlled NOTS. They're.

1207
00:46:41,416 --> 00:46:45,370
>> Not two controlled NOTS,

1208
00:46:45,371 --> 00:46:49,650
we just have an X gate there.

1209
00:46:49,651 --> 00:46:52,195
So, up to here it's
equivalent to identity, right?

1210
00:46:52,196 --> 00:46:53,375
And then we just

1211
00:46:53,376 --> 00:46:57,320
flip the output bit
and then we got NOT X.

1212
00:46:57,321 --> 00:47:00,782
So, those are
the four circuit values.

1213
00:47:00,783 --> 00:47:05,235
Okay. Everyone's good so far?

1214
00:47:05,236 --> 00:47:08,445
Everyone knows how we
write our four functions?

1215
00:47:08,446 --> 00:47:11,340
Are you ready to
see how we solve

1216
00:47:11,341 --> 00:47:14,530
it on a quantum
computer? We use this.

1217
00:47:14,531 --> 00:47:16,640
So, we're going to
break the assumption

1218
00:47:16,641 --> 00:47:20,755
that this value goes into
the black-box as zero.

1219
00:47:20,756 --> 00:47:22,840
We put, first, we initialize

1220
00:47:22,841 --> 00:47:25,390
both in putting up
a qubits to zero.

1221
00:47:25,391 --> 00:47:28,315
We bit flip them so
now they're both one.

1222
00:47:28,316 --> 00:47:31,015
We put them through the
Hadamard gate to put them into

1223
00:47:31,016 --> 00:47:34,780
equal superposition then we
send them into the black-box.

1224
00:47:34,781 --> 00:47:37,245
One of those four
circuits is applied.

1225
00:47:37,246 --> 00:47:38,820
Then we do the post-processing,

1226
00:47:38,821 --> 00:47:40,270
we send them through
the Hadamard gate again

1227
00:47:40,271 --> 00:47:42,255
and we measure them.
This is measurement.

1228
00:47:42,256 --> 00:47:46,150
And I claim, and I will
show it to you that if

1229
00:47:46,151 --> 00:47:47,865
the black-box function
is constant

1230
00:47:47,866 --> 00:47:50,620
the system will be in state
one-one after measurement.

1231
00:47:50,621 --> 00:47:53,105
Like this will have value
one, this will have value one.

1232
00:47:53,106 --> 00:47:55,765
We're using input as the most
significant bit by the way.

1233
00:47:55,766 --> 00:47:58,120
And if the black-box function is

1234
00:47:58,121 --> 00:47:59,610
variable and the system

1235
00:47:59,611 --> 00:48:01,210
will be in state zero-one
after measurements.

1236
00:48:01,211 --> 00:48:03,305
So this will be zero,
this will be one.

1237
00:48:03,306 --> 00:48:05,420
And we will know whether
the function is constant or

1238
00:48:05,421 --> 00:48:07,625
variable in a single query.

1239
00:48:07,626 --> 00:48:10,920
Pretty nifty, right? I'm going
to show you how it's done.

1240
00:48:10,921 --> 00:48:13,195
First the preprocessing.

1241
00:48:13,196 --> 00:48:15,330
Remember, we start
with zero then

1242
00:48:15,331 --> 00:48:17,700
we'd been flipped both in
the Hadamard gate both.

1243
00:48:17,701 --> 00:48:21,145
So we start here, bit flip
takes us up to here,

1244
00:48:21,146 --> 00:48:22,810
Hadamard gate down here.

1245
00:48:22,811 --> 00:48:25,500
So this is the value that
is sent into the black-box.

1246
00:48:25,501 --> 00:48:26,180
Just remember it's in

1247
00:48:26,181 --> 00:48:27,955
the bottom right
on the unit circle.

1248
00:48:27,956 --> 00:48:29,610
This is the value
right before we send

1249
00:48:29,611 --> 00:48:31,365
it through one of
those four circuits.

1250
00:48:31,366 --> 00:48:35,020
Okay? Now, let's look
at how we do constant-0.

1251
00:48:35,021 --> 00:48:37,680
So constant-0 remember,
it's just blank on

1252
00:48:37,681 --> 00:48:41,110
both and the post-processing
is a single Hadamard gate.

1253
00:48:41,111 --> 00:48:43,830
So since no gates are
applied they stay in

1254
00:48:43,831 --> 00:48:46,905
this bottom right value,

1255
00:48:46,906 --> 00:48:48,420
and since the Hadamard gate is

1256
00:48:48,421 --> 00:48:50,310
applied as part of
the post-processing,

1257
00:48:50,311 --> 00:48:52,065
we flipped back up here.

1258
00:48:52,066 --> 00:48:55,175
When we measure this,
this is one-one.

1259
00:48:55,176 --> 00:48:57,370
Remember I said
the value would be

1260
00:48:57,371 --> 00:48:59,810
one-one if it were
a constant function.

1261
00:48:59,811 --> 00:49:02,565
So we're one for one, okay?

1262
00:49:02,566 --> 00:49:05,455
Seem okay so far? All right.

1263
00:49:05,456 --> 00:49:08,080
Let's add a bit flip

1264
00:49:08,081 --> 00:49:10,170
because we're going to
go over constant-one now.

1265
00:49:10,171 --> 00:49:12,805
So this is the other
constant function.

1266
00:49:12,806 --> 00:49:16,410
Now remember, if
we do a bit flip in

1267
00:49:16,411 --> 00:49:21,705
this state we flip across
the unit circle over here,

1268
00:49:21,706 --> 00:49:24,240
and the Hadamard gate

1269
00:49:24,241 --> 00:49:27,215
then takes us down to here,
zero and negative one.

1270
00:49:27,216 --> 00:49:31,155
When we measure it
we again get one-one.

1271
00:49:31,156 --> 00:49:34,350
Okay? So we're two for two.

1272
00:49:34,351 --> 00:49:37,770
Not bad, right? Okay. Things
get a bit more complicated.

1273
00:49:37,771 --> 00:49:39,210
Does anyone have any trouble
with this so far?

1274
00:49:39,211 --> 00:49:40,480
And then, yes?

1275
00:49:40,481 --> 00:49:47,290
>> I just didn't get like
why it turns out to one-one?

1276
00:49:47,291 --> 00:49:48,520
>> Why it works out to one-one?

1277
00:49:48,521 --> 00:49:48,930
>> Yes.

1278
00:49:48,931 --> 00:49:51,560
>>That's a good question.
Okay. So we're up here, right?

1279
00:49:51,561 --> 00:49:54,000
If we measure this
then what value do we

1280
00:49:54,001 --> 00:49:56,705
get? This is just one.

1281
00:49:56,706 --> 00:50:00,485
Remember, this is
the value of the one bit.

1282
00:50:00,486 --> 00:50:02,595
So if you measure
one, we get one.

1283
00:50:02,596 --> 00:50:04,950
Yes. Now down here,

1284
00:50:04,951 --> 00:50:07,020
if we measure this we also get

1285
00:50:07,021 --> 00:50:09,360
one because negative one
squared is one.

1286
00:50:09,361 --> 00:50:13,980
So is 100% probability
of collapsing to one.

1287
00:50:13,981 --> 00:50:17,115
And so, we can say
this is one-one.

1288
00:50:17,116 --> 00:50:18,760
This is like
the most significant bit

1289
00:50:18,761 --> 00:50:20,975
and this is the least
significant bit.

1290
00:50:20,976 --> 00:50:22,630
So we end up with one-one.

1291
00:50:22,631 --> 00:50:23,630
Does that answer your question?

1292
00:50:23,631 --> 00:50:23,890
>> Yeah.

1293
00:50:23,891 --> 00:50:27,250
>> Okay. Great. All right.

1294
00:50:27,251 --> 00:50:31,050
Let's go on to something more
complicated, which is CNOT.

1295
00:50:31,051 --> 00:50:32,840
This is going to get a bit weird

1296
00:50:32,841 --> 00:50:34,700
but this is how we
do identity remember?

1297
00:50:34,701 --> 00:50:36,760
The input bit is
the control bit,

1298
00:50:36,761 --> 00:50:38,860
the output bit is
the target bit.

1299
00:50:38,861 --> 00:50:41,635
And don't panic,

1300
00:50:41,636 --> 00:50:43,830
I'm going to show you why
this is on the next slide.

1301
00:50:43,831 --> 00:50:46,120
But the action of
CNOT is to take

1302
00:50:46,121 --> 00:50:49,000
our input qubit up to here.

1303
00:50:49,001 --> 00:50:53,385
That's the green line. This
is weird for two reasons.

1304
00:50:53,386 --> 00:50:55,495
One is that the CNOT

1305
00:50:55,496 --> 00:50:57,630
is supposed to leave
the control bit unchanged.

1306
00:50:57,631 --> 00:50:59,925
Right? But here this is
the only thing that control bit,

1307
00:50:59,926 --> 00:51:02,255
like the qubit it's
the only thing that's changed.

1308
00:51:02,256 --> 00:51:04,660
And, this sort of
action is a bit odd,

1309
00:51:04,661 --> 00:51:06,405
but don't worry I'm going
to show you the math,

1310
00:51:06,406 --> 00:51:08,650
the reason why this
works on the next slide.

1311
00:51:08,651 --> 00:51:10,280
But just for now,

1312
00:51:10,281 --> 00:51:12,765
so we flip from here up to here,

1313
00:51:12,766 --> 00:51:15,235
and then when we do
the Hadamard gate

1314
00:51:15,236 --> 00:51:18,735
to post-process we
end up in state zero.

1315
00:51:18,736 --> 00:51:22,160
So zero-one, pretty neat.

1316
00:51:22,161 --> 00:51:23,815
Okay, here's how the math works.

1317
00:51:23,816 --> 00:51:26,230
We're applying the CNOT gate

1318
00:51:26,231 --> 00:51:28,490
to the state one over root two,

1319
00:51:28,491 --> 00:51:29,750
negative one over root two,

1320
00:51:29,751 --> 00:51:32,045
and one over a two, negative one
over root two, right?

1321
00:51:32,046 --> 00:51:33,590
When we tensor these together,

1322
00:51:33,591 --> 00:51:35,630
we get this ridiculous matrix
which I'm going to

1323
00:51:35,631 --> 00:51:38,165
factor out one-half,
just to make it readable.

1324
00:51:38,166 --> 00:51:39,880
So, we have the matrix one,

1325
00:51:39,881 --> 00:51:41,965
or a spectra is at 1-1-1,1.

1326
00:51:41,966 --> 00:51:44,170
Right? Now, we remember

1327
00:51:44,171 --> 00:51:46,490
this familiar matrix
from the CNOT slide.

1328
00:51:46,491 --> 00:51:51,120
When we apply this matrix
to this vector we get this.

1329
00:51:51,121 --> 00:51:53,520
Right? We flip
the bottom two rows.

1330
00:51:53,521 --> 00:51:56,470
Now, when we factor this,

1331
00:51:56,471 --> 00:51:58,020
remember the products
that we can

1332
00:51:58,021 --> 00:52:00,085
factor it into
the individual state,

1333
00:52:00,086 --> 00:52:02,455
we get this tensor product.

1334
00:52:02,456 --> 00:52:04,740
If you ignore everything
in the middle and just

1335
00:52:04,741 --> 00:52:07,020
compare our start values
to our end values,

1336
00:52:07,021 --> 00:52:11,815
this is the output or
least significant bit.

1337
00:52:11,816 --> 00:52:13,140
This is unchanged.

1338
00:52:13,141 --> 00:52:15,110
Right? This is
still one 1/2 -1/2.

1339
00:52:15,111 --> 00:52:17,200
The input bit which
started out as

1340
00:52:17,201 --> 00:52:21,325
1/2 -1/2 ends up as
1/ 2 1 over root two.

1341
00:52:21,326 --> 00:52:23,430
This is just the action
of the gate.

1342
00:52:23,431 --> 00:52:25,150
So this is kind
of a limitation of

1343
00:52:25,151 --> 00:52:27,750
our visualizer that
we can't really show

1344
00:52:27,751 --> 00:52:30,150
the state transition
but I hope I've

1345
00:52:30,151 --> 00:52:33,735
convinced you that this arrow
is in fact what happens.

1346
00:52:33,736 --> 00:52:36,775
Does anyone have
any questions about this?

1347
00:52:36,776 --> 00:52:39,960
Okay so we're three
for three right.

1348
00:52:39,961 --> 00:52:44,880
I said the measure value
would be zero-one,

1349
00:52:44,881 --> 00:52:47,070
if it were a
variable function and

1350
00:52:47,071 --> 00:52:49,170
indeed it is as I said.

1351
00:52:49,171 --> 00:52:50,845
So for three-three.Three
for three.

1352
00:52:50,846 --> 00:52:54,075
Let's go over the very last one
which is negation.

1353
00:52:54,076 --> 00:52:57,015
It's a CNOT and then a bit flip.

1354
00:52:57,016 --> 00:52:59,625
Right? Let's see how that works.

1355
00:52:59,626 --> 00:53:01,220
Again we have this arrow.

1356
00:53:01,221 --> 00:53:03,100
Taking us up to here and

1357
00:53:03,101 --> 00:53:05,130
the bit flip takes us
across the unit circle

1358
00:53:05,131 --> 00:53:06,760
and we do the Hadamard

1359
00:53:06,761 --> 00:53:09,360
post-processing to
get us down to here.

1360
00:53:09,361 --> 00:53:12,545
When we measure these,
we get zero-one.

1361
00:53:12,546 --> 00:53:15,050
Four for four, huh?

1362
00:53:15,051 --> 00:53:16,910
Single query, outperformed

1363
00:53:16,911 --> 00:53:19,350
classical computation,
pretty nuts, right?

1364
00:53:19,351 --> 00:53:23,350
Pretty nuts. Okay, so we did it.

1365
00:53:23,351 --> 00:53:26,150
We now, we have outperformed
classical computing.

1366
00:53:26,151 --> 00:53:27,210
Classical computing
is in the dust.

1367
00:53:27,211 --> 00:53:28,950
It's done, it's dead.

1368
00:53:28,951 --> 00:53:30,690
So we might think like,

1369
00:53:30,691 --> 00:53:32,680
yeah I see how the math works
and what's the intuition?

1370
00:53:32,681 --> 00:53:34,455
I'm going to tell
you the intuition.

1371
00:53:34,456 --> 00:53:37,210
The intuition is the difference

1372
00:53:37,211 --> 00:53:41,030
within the categories was
a single negation gate.

1373
00:53:41,031 --> 00:53:46,440
So if we go back to here,

1374
00:53:46,441 --> 00:53:50,095
so we have constant
zero and constant one.

1375
00:53:50,096 --> 00:53:51,270
The only difference
between them is

1376
00:53:51,271 --> 00:53:52,780
a single negation gate.

1377
00:53:52,781 --> 00:53:56,235
When you apply negation gate
in a superposed state,

1378
00:53:56,236 --> 00:53:58,170
it doesn't really
have any effect.

1379
00:53:58,171 --> 00:53:59,760
Right? So we kind of

1380
00:53:59,761 --> 00:54:02,490
neutralize the effect
of the negation gate.

1381
00:54:02,491 --> 00:54:04,670
So we neutralize
the difference within

1382
00:54:04,671 --> 00:54:07,770
the categories and
then we magnify

1383
00:54:07,771 --> 00:54:10,010
the difference between
the categories which is that

1384
00:54:10,011 --> 00:54:11,350
the variable functions
have a CNOT

1385
00:54:11,351 --> 00:54:13,475
and the constant
functions do not.

1386
00:54:13,476 --> 00:54:14,960
So we magnify the effect of

1387
00:54:14,961 --> 00:54:18,865
the CNOT and minimize
the effect of the negation.

1388
00:54:18,866 --> 00:54:21,360
And that's a
powerful thing about

1389
00:54:21,361 --> 00:54:25,105
quantum computing which
is that you can change

1390
00:54:25,106 --> 00:54:28,535
the action of
various logic gates

1391
00:54:28,536 --> 00:54:29,870
by putting yourself in

1392
00:54:29,871 --> 00:54:32,665
superposition in different sorts
of states and stuff.

1393
00:54:32,666 --> 00:54:35,430
So that's pretty
neat. And this problem

1394
00:54:35,431 --> 00:54:37,185
you may say like,
"Okay well yeah.

1395
00:54:37,186 --> 00:54:39,820
Great. Whatever."
It's really contrived.

1396
00:54:39,821 --> 00:54:41,540
When do I ever do
this in real life?

1397
00:54:41,541 --> 00:54:44,130
That's a good
question and it was

1398
00:54:44,131 --> 00:54:47,410
contrived back when
it was announced,

1399
00:54:47,411 --> 00:54:51,480
I think was 1993, but
then a generalized version of

1400
00:54:51,481 --> 00:54:53,955
this function was found

1401
00:54:53,956 --> 00:54:56,810
which it takes n bits as
input, not a single bit.

1402
00:54:56,811 --> 00:55:00,200
And the n bits either all
map to the same value, sorry,

1403
00:55:00,201 --> 00:55:02,060
like that's two to
the n possible values,

1404
00:55:02,061 --> 00:55:03,940
they all map to the same value

1405
00:55:03,941 --> 00:55:06,290
or they equally
map to zero or one.

1406
00:55:06,291 --> 00:55:07,990
They're constant or
balanced it's called.

1407
00:55:07,991 --> 00:55:10,500
And so it's kind of just
generalized version of this.

1408
00:55:10,501 --> 00:55:13,770
It turns out we can still
solve that on a single query.

1409
00:55:13,771 --> 00:55:16,515
Exponential speedup, huh?

1410
00:55:16,516 --> 00:55:18,380
Exponential speedup.

1411
00:55:18,381 --> 00:55:19,830
A single query versus on

1412
00:55:19,831 --> 00:55:21,530
a classical computer you
have to try all two to

1413
00:55:21,531 --> 00:55:24,020
the n values before you know

1414
00:55:24,021 --> 00:55:27,060
whether it is constant
or variable. Pretty nuts.

1415
00:55:27,061 --> 00:55:29,880
Okay? Then there's a variant

1416
00:55:29,881 --> 00:55:31,160
of that problem building

1417
00:55:31,161 --> 00:55:33,125
everyone's kinda like
building on top of each other,

1418
00:55:33,126 --> 00:55:35,580
it's called Simon's
periodicity problem.

1419
00:55:35,581 --> 00:55:37,080
It's again you have
like a black box and

1420
00:55:37,081 --> 00:55:38,430
you're trying to figure
out some properties of

1421
00:55:38,431 --> 00:55:40,980
the function and
then once that came

1422
00:55:40,981 --> 00:55:44,025
around Shor he looked at
this and he's like, "Oh!

1423
00:55:44,026 --> 00:55:46,570
We can use this to
factor large integers."

1424
00:55:46,571 --> 00:55:48,170
And so he came up with
Shores algorithm and

1425
00:55:48,171 --> 00:55:50,395
that's when the whole field
really caught fire.

1426
00:55:50,396 --> 00:55:52,070
So I hope I've
convinced you that well

1427
00:55:52,071 --> 00:55:53,470
this individual problem is

1428
00:55:53,471 --> 00:55:55,545
kind of contrived
and not that useful,

1429
00:55:55,546 --> 00:55:58,120
it's the base, like
the foundation of

1430
00:55:58,121 --> 00:56:00,370
some very interesting
computational properties.

1431
00:56:00,371 --> 00:56:02,365
Did that make sense?

1432
00:56:02,366 --> 00:56:05,605
Anyone have any questions?

1433
00:56:05,606 --> 00:56:07,560
You're all like
convinced that we

1434
00:56:07,561 --> 00:56:11,300
just crushed a classical
computer right here? Yes?

1435
00:56:11,301 --> 00:56:13,645
>>On the Microsoft site

1436
00:56:13,646 --> 00:56:16,645
there's an article where
the girl was saying,

1437
00:56:16,646 --> 00:56:21,190
with quantum computers
you can take programs that

1438
00:56:21,191 --> 00:56:22,845
take billions of years to run

1439
00:56:22,846 --> 00:56:25,370
and run them in
a week. Is this...

1440
00:56:25,371 --> 00:56:25,890
[Croostalk].

1441
00:56:25,891 --> 00:56:26,980
>>This could be
that. I mean yeah.

1442
00:56:26,981 --> 00:56:29,015
We have an exponential speedup.

1443
00:56:29,016 --> 00:56:30,770
If you have like, I don't know.

1444
00:56:30,771 --> 00:56:32,520
What it would take something
like a billion years to run?

1445
00:56:32,521 --> 00:56:35,620
Like if you have
an 80 bit function,

1446
00:56:35,621 --> 00:56:38,580
like to the power of 80 versus
like a single query that's

1447
00:56:38,581 --> 00:56:40,045
probably a billion years
versus a week

1448
00:56:40,046 --> 00:56:42,575
something like that. So.

1449
00:56:42,576 --> 00:56:46,650
>> A question. So I
understand speedup but this is

1450
00:56:46,651 --> 00:56:48,720
the speedup in answering
this question from

1451
00:56:48,721 --> 00:56:51,275
the output coming
to get the input.

1452
00:56:51,276 --> 00:56:54,500
Right? Whether the function
was a constant function or.

1453
00:56:54,501 --> 00:56:55,055
>>Yes.

1454
00:56:55,056 --> 00:56:56,830
>> Right? But in

1455
00:56:56,831 --> 00:57:00,150
what context is
that question unimportant?

1456
00:57:00,151 --> 00:57:01,580
>>Great question. Why do

1457
00:57:01,581 --> 00:57:02,910
we care about
this sort of thing?

1458
00:57:02,911 --> 00:57:05,230
So for example in
Shor's algorithm you

1459
00:57:05,231 --> 00:57:07,310
can construct a question like

1460
00:57:07,311 --> 00:57:09,940
does this integer have

1461
00:57:09,941 --> 00:57:12,575
a certain factor in
structure basically?

1462
00:57:12,576 --> 00:57:15,360
And you can tell a property
like whether it has

1463
00:57:15,361 --> 00:57:18,710
that property or not basically
which will allow you to,

1464
00:57:18,711 --> 00:57:19,810
and if it does have
that property you

1465
00:57:19,811 --> 00:57:22,545
can factor it pretty much.

1466
00:57:22,546 --> 00:57:25,730
It's very very hand-waverly

1467
00:57:25,731 --> 00:57:27,350
explaining how
Shor's algorithm works.

1468
00:57:27,351 --> 00:57:30,220
So you can construct
a lot of problems in terms

1469
00:57:30,221 --> 00:57:34,445
of does this function have
a certain property or not,

1470
00:57:34,446 --> 00:57:36,000
which you can find
efficiently on

1471
00:57:36,001 --> 00:57:38,815
a quantum computer. I hope, Yes?

1472
00:57:38,816 --> 00:57:41,035
>> Do you mean
this decision helps?

1473
00:57:41,036 --> 00:57:44,250
>> Mainly decision problems.

1474
00:57:44,251 --> 00:57:46,530
Although, as we know from
theoretical computer science,

1475
00:57:46,531 --> 00:57:50,260
decision problems can be
usually be turned into

1476
00:57:50,261 --> 00:57:52,700
like generally
finding the answer

1477
00:57:52,701 --> 00:57:54,595
to problems and vice versa.

1478
00:57:54,596 --> 00:57:57,085
So, yeah.

1479
00:57:57,086 --> 00:58:00,190
Okay, pretty good so far.

1480
00:58:00,191 --> 00:58:02,655
To recap the whole presentation,

1481
00:58:02,656 --> 00:58:04,570
we learned how to model
classical computation with

1482
00:58:04,571 --> 00:58:06,270
basic linear algebra,
we learned about qbits,

1483
00:58:06,271 --> 00:58:08,040
superposition, and
the Hadamard gate,

1484
00:58:08,041 --> 00:58:09,890
and finally we learned about
the Deutsch Oracle problem,

1485
00:58:09,891 --> 00:58:12,425
where quantum outperforms
classical, pretty nifty?

1486
00:58:12,426 --> 00:58:14,930
Okay, now the bonus topics.

1487
00:58:14,931 --> 00:58:16,090
With all the tools we have

1488
00:58:16,091 --> 00:58:18,730
these will be a breeze for you.

1489
00:58:18,731 --> 00:58:22,350
You'll never have to read
some pop science articles on

1490
00:58:22,351 --> 00:58:24,110
quantum entanglement
and like try

1491
00:58:24,111 --> 00:58:26,225
and muddle through there
a horrible metaphor.

1492
00:58:26,226 --> 00:58:28,000
You'll actually know
the math, all right?

1493
00:58:28,001 --> 00:58:30,020
You'll know the math,
that is incredible.

1494
00:58:30,021 --> 00:58:32,800
And we'll go on quantum
teleportation, which is super,

1495
00:58:32,801 --> 00:58:36,040
super nifty like
it is mind-blowing.

1496
00:58:36,041 --> 00:58:38,045
Okay, quantum entanglement.

1497
00:58:38,046 --> 00:58:39,660
You asked a great question,

1498
00:58:39,661 --> 00:58:41,750
a very impressing question
earlier which is,

1499
00:58:41,751 --> 00:58:43,085
"Can we always factor

1500
00:58:43,086 --> 00:58:46,005
the product state
into the qbit state?"

1501
00:58:46,006 --> 00:58:48,000
When we cannot do that,

1502
00:58:48,001 --> 00:58:52,245
that means that
the qbits are entangled.

1503
00:58:52,246 --> 00:58:53,785
For example this state,

1504
00:58:53,786 --> 00:58:57,205
if we have qbits in this state
which is one over, two,

1505
00:58:57,206 --> 00:58:59,045
001 over root two,

1506
00:58:59,046 --> 00:59:01,085
if we try and
factor this, we can.

1507
00:59:01,086 --> 00:59:02,585
So let's try and factor this.

1508
00:59:02,586 --> 00:59:04,180
If we can factor it,

1509
00:59:04,181 --> 00:59:05,190
we should be able to write it as

1510
00:59:05,191 --> 00:59:07,100
a tensor product of
two matrices, right?

1511
00:59:07,101 --> 00:59:09,495
Where A times C is
one over root two,

1512
00:59:09,496 --> 00:59:10,825
A times D is zero,

1513
00:59:10,826 --> 00:59:11,980
B times C is zero,

1514
00:59:11,981 --> 00:59:13,670
and B times D is
one over root two.

1515
00:59:13,671 --> 00:59:15,735
So we have this set
of equations right?

1516
00:59:15,736 --> 00:59:18,050
Now, A times D equals zero that

1517
00:59:18,051 --> 00:59:20,400
means A or D has to equal zero.

1518
00:59:20,401 --> 00:59:22,260
If A equals zero then

1519
00:59:22,261 --> 00:59:23,720
AC will be equal
zero and it doesn't,

1520
00:59:23,721 --> 00:59:25,415
so A cannot equal zero.

1521
00:59:25,416 --> 00:59:28,655
If D equals zero then BD would
equal zero but it doesn't,

1522
00:59:28,656 --> 00:59:29,900
so D cannot equal zero.

1523
00:59:29,901 --> 00:59:31,530
So the only solution is there is

1524
00:59:31,531 --> 00:59:34,175
no solution. We
cannot factor this.

1525
00:59:34,176 --> 00:59:35,820
This is an percent
unfactorable state.

1526
00:59:35,821 --> 00:59:40,480
And what this means is we
cannot separate these qbits.

1527
00:59:40,481 --> 00:59:42,870
They have no individual value,

1528
00:59:42,871 --> 00:59:44,330
their value only make sense

1529
00:59:44,331 --> 00:59:46,675
together, they're
called entangled.

1530
00:59:46,676 --> 00:59:48,600
And the way we might
think of this is

1531
00:59:48,601 --> 00:59:51,200
that if we measure this state,

1532
00:59:51,201 --> 00:59:53,400
it has a 50 percent chance
of collapsing to zero,

1533
00:59:53,401 --> 00:59:56,270
zero and 50 percent chance
of collapsing to one,one,

1534
00:59:56,271 --> 00:59:58,910
so the qbits are
coordinating, right?

1535
00:59:58,911 --> 01:00:00,950
Does anyone have
any confusion with

1536
01:00:00,951 --> 01:00:03,125
this sort of mathematical
representation?

1537
01:00:03,126 --> 01:00:05,515
Okay, let's talk
about what it means.

1538
01:00:05,516 --> 01:00:07,410
Well, let's not talk
about what it means

1539
01:00:07,411 --> 01:00:08,490
yet, you might be like, "Well,

1540
01:00:08,491 --> 01:00:10,390
Andrew I can sling
any old value into

1541
01:00:10,391 --> 01:00:11,820
the vector how do you
actually entangled

1542
01:00:11,821 --> 01:00:13,440
qbits?" It's really simple.

1543
01:00:13,441 --> 01:00:15,060
If we have two qbits,

1544
01:00:15,061 --> 01:00:16,720
we just put one qbit through

1545
01:00:16,721 --> 01:00:18,655
the Hadamard gate to
put in superposition,

1546
01:00:18,656 --> 01:00:21,310
and then that qbit is
the control bit in C naught.

1547
01:00:21,311 --> 01:00:22,755
Two gates, that's all we need.

1548
01:00:22,756 --> 01:00:24,180
Here's how it works
mathematically.

1549
01:00:24,181 --> 01:00:25,520
We started with zero zero,

1550
01:00:25,521 --> 01:00:29,110
we put the most significant bit
in superposition, right?

1551
01:00:29,111 --> 01:00:32,910
And then here's our familiar
matrix, seen our matrix.

1552
01:00:32,911 --> 01:00:35,260
If we apply it to
the product state, we get this.

1553
01:00:35,261 --> 01:00:37,435
This is the state from
the previous slide.

1554
01:00:37,436 --> 01:00:41,000
So really simple
to entangle qbits.

1555
01:00:41,001 --> 01:00:43,580
Okay? What does this mean?

1556
01:00:43,581 --> 01:00:46,760
I mean they seem
to be coordinating,

1557
01:00:46,761 --> 01:00:48,210
or like communicating,
or something

1558
01:00:48,211 --> 01:00:49,945
in some way, these two qbits.

1559
01:00:49,946 --> 01:00:52,390
And if you measure one qbit,

1560
01:00:52,391 --> 01:00:54,720
it collapses the other
in coordinated state.

1561
01:00:54,721 --> 01:00:56,650
Now the weird thing,

1562
01:00:56,651 --> 01:00:59,560
here's how we're going do
really weird stuff here, okay?

1563
01:00:59,561 --> 01:01:02,960
This happens across
huge distances.

1564
01:01:02,961 --> 01:01:04,600
China just this year,

1565
01:01:04,601 --> 01:01:06,420
managed to do this between

1566
01:01:06,421 --> 01:01:08,705
Earth and a satellite in space.

1567
01:01:08,706 --> 01:01:12,240
They entangled qbits, put
one half on the satellite,

1568
01:01:12,241 --> 01:01:13,630
it was launched into space.

1569
01:01:13,631 --> 01:01:16,210
When they measure them,
they're the same value.

1570
01:01:16,211 --> 01:01:18,730
It happens across
huge distances.

1571
01:01:18,731 --> 01:01:23,090
It happens faster than
light, it is instantaneous.

1572
01:01:23,091 --> 01:01:26,320
A 2013 experiment
entangled qbits,

1573
01:01:26,321 --> 01:01:27,955
moved them very far apart,

1574
01:01:27,956 --> 01:01:30,260
synchronizing with
an atomic clock,

1575
01:01:30,261 --> 01:01:31,970
they measured them
very close together.

1576
01:01:31,971 --> 01:01:34,620
So close together and time
that it would have taken

1577
01:01:34,621 --> 01:01:37,845
like 10,000 times longer
to travel between them.

1578
01:01:37,846 --> 01:01:39,740
So they aren't communicating
with any sort of

1579
01:01:39,741 --> 01:01:42,035
radiation anything
like that, okay?

1580
01:01:42,036 --> 01:01:45,235
They are instantaneous,
it's faster than light.

1581
01:01:45,236 --> 01:01:47,330
And you might be like "Well,

1582
01:01:47,331 --> 01:01:49,110
it's pretty obvious
what's going on here.

1583
01:01:49,111 --> 01:01:50,380
When the qbits were entangled,

1584
01:01:50,381 --> 01:01:51,390
they just decided ahead of

1585
01:01:51,391 --> 01:01:53,100
time what they're
gonna do, right?"

1586
01:01:53,101 --> 01:01:54,845
Well I got to
explain everything,

1587
01:01:54,846 --> 01:01:56,855
but that's called
hidden variable theory,

1588
01:01:56,856 --> 01:01:57,840
this is hidden variable theory.

1589
01:01:57,841 --> 01:02:00,300
It's the same reason that
when a qbits in superposition,

1590
01:02:00,301 --> 01:02:01,440
it isn't secretly zero,

1591
01:02:01,441 --> 01:02:04,105
or secretly one, it's
both, it's the same thing.

1592
01:02:04,106 --> 01:02:05,890
Hidden variable
theory, we're not

1593
01:02:05,891 --> 01:02:07,660
going to over the proof
why it doesn't work,

1594
01:02:07,661 --> 01:02:09,760
but basically here's
this guy named John Bell,

1595
01:02:09,761 --> 01:02:12,090
and he showed that if hidden
variable theory were true,

1596
01:02:12,091 --> 01:02:14,555
it had some really
weird implications,

1597
01:02:14,556 --> 01:02:17,195
and therefore it's unattainable.

1598
01:02:17,196 --> 01:02:20,155
This is just the state, this
is how the universe works.

1599
01:02:20,156 --> 01:02:22,420
They coordinate
faster than light,

1600
01:02:22,421 --> 01:02:24,570
they just do and that's nice.

1601
01:02:24,571 --> 01:02:26,580
And you might be like, "Well,

1602
01:02:26,581 --> 01:02:27,950
I've been told
my entire life there's

1603
01:02:27,951 --> 01:02:29,850
a universal speed limit,
the speed of light, right?

1604
01:02:29,851 --> 01:02:30,550
Like what's up with that?

1605
01:02:30,551 --> 01:02:31,995
We can't just chuck it all out."

1606
01:02:31,996 --> 01:02:33,700
And this is in fact a big source

1607
01:02:33,701 --> 01:02:35,650
of consternation to Einstein,

1608
01:02:35,651 --> 01:02:39,255
the idea that
locality wasn't true,

1609
01:02:39,256 --> 01:02:40,940
and then it was discovered

1610
01:02:40,941 --> 01:02:42,670
that there's a really
important qualifier.

1611
01:02:42,671 --> 01:02:44,930
You can have faster-than-light
coordination,

1612
01:02:44,931 --> 01:02:47,530
but you cannot have
faster-than-light communication,

1613
01:02:47,531 --> 01:02:51,460
so information cannot be
communicated. So think about it.

1614
01:02:51,461 --> 01:02:54,095
If I entangle two qbits,
I give you one,

1615
01:02:54,096 --> 01:02:55,380
we go to opposite ends of

1616
01:02:55,381 --> 01:02:57,795
the universe, if
I collapse mine,

1617
01:02:57,796 --> 01:02:59,850
all I know is that
you collapse yours,

1618
01:02:59,851 --> 01:03:02,460
and when you collapse yours,
you will see the same thing.

1619
01:03:02,461 --> 01:03:05,000
That there's no information

1620
01:03:05,001 --> 01:03:07,445
that can be communicated
there really.

1621
01:03:07,446 --> 01:03:09,930
So, faster than
light coordination is okay,

1622
01:03:09,931 --> 01:03:15,210
faster than like light
communication, not okay. Yes?

1623
01:03:15,211 --> 01:03:17,565
>> Coordination does not
involve communication?

1624
01:03:17,566 --> 01:03:20,680
>> It does in a way,

1625
01:03:20,681 --> 01:03:21,780
but communication here is

1626
01:03:21,781 --> 01:03:23,970
a technical term
which means like,

1627
01:03:23,971 --> 01:03:26,540
I have a bit of information
that I can transfer

1628
01:03:26,541 --> 01:03:29,260
to you, pretty much.

1629
01:03:29,261 --> 01:03:31,990
So I use the term
coordination to try and

1630
01:03:31,991 --> 01:03:34,585
give a name to something
which is not that,

1631
01:03:34,586 --> 01:03:35,890
but still involves
like some kind

1632
01:03:35,891 --> 01:03:38,830
of coordination I guess.

1633
01:03:38,831 --> 01:03:41,300
Like I said, there is
a limitation of our language,

1634
01:03:41,301 --> 01:03:44,025
all we can do is look at
the math and see what it does,

1635
01:03:44,026 --> 01:03:47,195
and our language it was
not developed for this.

1636
01:03:47,196 --> 01:03:48,660
Anything I try and tell you is

1637
01:03:48,661 --> 01:03:50,610
fundamentally a lie,
except for the math.

1638
01:03:50,611 --> 01:03:51,570
>> I have a question.

1639
01:03:51,571 --> 01:03:52,200
>> Yes.

1640
01:03:52,201 --> 01:03:54,840
>> So let's say I have
two entangled qbits.

1641
01:03:54,841 --> 01:03:55,510
>> Yes.

1642
01:03:55,511 --> 01:03:59,740
>> And I measure one
and I know its value.

1643
01:03:59,741 --> 01:04:02,445
Does that mean
that the other one

1644
01:04:02,446 --> 01:04:05,460
is could potentially
still not be measured,

1645
01:04:05,461 --> 01:04:08,300
but when it is measured it
will have the same value?

1646
01:04:08,301 --> 01:04:09,730
>> Right, when you measure one

1647
01:04:09,731 --> 01:04:11,210
it instantly
collapses the other.

1648
01:04:11,211 --> 01:04:12,250
>> I'm sorry, that was
my question earlier.

1649
01:04:12,251 --> 01:04:14,040
>> Yeah, good question.

1650
01:04:14,041 --> 01:04:16,030
I said that's
a simplification again of

1651
01:04:16,031 --> 01:04:18,860
language but you can
think of it that way.

1652
01:04:18,861 --> 01:04:21,200
Yes, sorry you had a question.

1653
01:04:21,201 --> 01:04:22,650
>> So there's no way to tell

1654
01:04:22,651 --> 01:04:24,130
that something has been
collapsed or not then.

1655
01:04:24,131 --> 01:04:25,650
>> Excellent question. If you

1656
01:04:25,651 --> 01:04:27,340
could tell whether something's
been collapsed or not,

1657
01:04:27,341 --> 01:04:29,290
you could measure one and
use that as synchronization,

1658
01:04:29,291 --> 01:04:31,190
faster than light
synchronization, right?

1659
01:04:31,191 --> 01:04:34,080
Yeah you can't. The process of

1660
01:04:34,081 --> 01:04:35,600
telling whether something is in

1661
01:04:35,601 --> 01:04:37,030
superposition or not
would just collapse it.

1662
01:04:37,031 --> 01:04:38,670
>> It seems like you will
be able to tell through

1663
01:04:38,671 --> 01:04:40,350
some of the sort of
quantum computation,

1664
01:04:40,351 --> 01:04:42,975
like you do some computation
on that, they was collapsed,

1665
01:04:42,976 --> 01:04:44,790
they would only be
this state and if

1666
01:04:44,791 --> 01:04:46,620
it wasn't it would sometimes
do this, sometimes do that.

1667
01:04:46,621 --> 01:04:49,375
>> You would think so, but
in fact it is not the case.

1668
01:04:49,376 --> 01:04:53,015
>> I believe you I was
just creating imaginations,

1669
01:04:53,016 --> 01:04:56,570
is there any intuational ways
about the case?

1670
01:04:56,571 --> 01:04:57,970
>> Is there intu can I say intu?

1671
01:04:57,971 --> 01:05:06,180
>> Shut up and do the math?

1672
01:05:06,181 --> 01:05:08,035
>> Shut up and calculate,

1673
01:05:08,036 --> 01:05:09,770
that's a good like a way out.

1674
01:05:09,771 --> 01:05:12,405
I'm not sure I can't
say it intuitively,

1675
01:05:12,406 --> 01:05:14,830
I can say that if you do put

1676
01:05:14,831 --> 01:05:17,750
a pencil and paper
it, try it yourself,

1677
01:05:17,751 --> 01:05:18,370
try and come with

1678
01:05:18,371 --> 01:05:19,750
some sequence of
operations you can do on

1679
01:05:19,751 --> 01:05:22,120
the other qbit
which would reveal

1680
01:05:22,121 --> 01:05:26,675
it as having being collapsed
or not then maybe but, yes.

1681
01:05:26,676 --> 01:05:29,440
>> Doesn't this coordination
communication conversation

1682
01:05:29,441 --> 01:05:32,300
that we're having
violate causality or it doesn't?

1683
01:05:32,301 --> 01:05:33,480
>> Yes, this is
the critical thing,

1684
01:05:33,481 --> 01:05:34,685
it does not violate causality.

1685
01:05:34,686 --> 01:05:37,095
If we could communicate then
it would violate causality,

1686
01:05:37,096 --> 01:05:39,250
but since we coordinated
does not violate causality.

1687
01:05:39,251 --> 01:05:40,525
>> But instead
what you said was,

1688
01:05:40,526 --> 01:05:42,020
if you measure
the other one is going

1689
01:05:42,021 --> 01:05:43,590
to be that as well, right?

1690
01:05:43,591 --> 01:05:44,180
>> Yes.

1691
01:05:44,181 --> 01:05:48,330
>> The act of measurement
is in your control, right?

1692
01:05:48,331 --> 01:05:49,040
>> Yes.

1693
01:05:49,041 --> 01:05:52,830
>> So how can that happen
on the other side of

1694
01:05:52,831 --> 01:05:57,670
the qbit if you don't have
communication because that's.

1695
01:05:57,671 --> 01:05:59,385
>> Well let's define
what communication is.

1696
01:05:59,386 --> 01:06:00,885
Communication is I have a bit,

1697
01:06:00,886 --> 01:06:01,920
either zero or one and I'm

1698
01:06:01,921 --> 01:06:03,230
able to send it
to you in someway.

1699
01:06:03,231 --> 01:06:04,360
>> Somehow yeah.

1700
01:06:04,361 --> 01:06:04,665
>> Yes.

1701
01:06:04,666 --> 01:06:06,765
>> The state that
is not collapsed,

1702
01:06:06,766 --> 01:06:08,240
be communicated to
the other state,

1703
01:06:08,241 --> 01:06:10,695
this is what I'm saying.

1704
01:06:10,696 --> 01:06:13,385
>> Yeah I mean this
is a language problem.

1705
01:06:13,386 --> 01:06:15,715
Qbits are like communicating but

1706
01:06:15,716 --> 01:06:18,400
we can't get information
through them basically.

1707
01:06:18,401 --> 01:06:20,185
You might be able to say that.

1708
01:06:20,186 --> 01:06:21,670
I use that term coordinating

1709
01:06:21,671 --> 01:06:23,065
to try and avoid this problem.

1710
01:06:23,066 --> 01:06:24,790
Other times in literature

1711
01:06:24,791 --> 01:06:26,445
you'll just see
the word correlated.

1712
01:06:26,446 --> 01:06:29,635
Which tries to avoid
that whole problem.

1713
01:06:29,636 --> 01:06:34,270
>> Coordination, it state
the word here when you are

1714
01:06:34,271 --> 01:06:37,860
using it, it has an action
that you have performed.

1715
01:06:37,861 --> 01:06:39,220
>> Yes, you control when

1716
01:06:39,221 --> 01:06:41,045
you measure in qubits
it collapses the other.

1717
01:06:41,046 --> 01:06:43,420
But there's no way
you can change

1718
01:06:43,421 --> 01:06:46,575
causality in
that other qubits frame.

1719
01:06:46,576 --> 01:06:48,690
Basically, there's no way
you can get information from

1720
01:06:48,691 --> 01:06:49,670
your frame into that frame

1721
01:06:49,671 --> 01:06:50,940
which would affect
their causality.

1722
01:06:50,941 --> 01:06:52,700
All we can know is,

1723
01:06:52,701 --> 01:06:54,370
we have generated

1724
01:06:54,371 --> 01:06:56,830
the same random numbers
basically, yeah.

1725
01:06:56,831 --> 01:06:59,995
>> It's kind of like
pre-coordination so these are.

1726
01:06:59,996 --> 01:07:02,960
>> I want to avoid that,
pre-coordination is

1727
01:07:02,961 --> 01:07:06,495
the qubits decided ahead of
time which is not the case.

1728
01:07:06,496 --> 01:07:07,770
>> Until you measure.

1729
01:07:07,771 --> 01:07:08,450
>> Yeah.

1730
01:07:08,451 --> 01:07:09,555
>> Or until these.

1731
01:07:09,556 --> 01:07:11,330
>> At the time they measure they

1732
01:07:11,331 --> 01:07:14,120
decide whether they're going

1733
01:07:14,121 --> 01:07:15,330
to zero or one and they somehow

1734
01:07:15,331 --> 01:07:16,945
communicate that coordinate,

1735
01:07:16,946 --> 01:07:19,130
correlate, whatever,
to the other qubits

1736
01:07:19,131 --> 01:07:20,920
and it goes in the same. Yes.

1737
01:07:20,921 --> 01:07:23,055
>> So, if you cannot communicate

1738
01:07:23,056 --> 01:07:25,050
what's the practical
application of quantum?

1739
01:07:25,051 --> 01:07:26,390
>> Great question.
We're going to get into

1740
01:07:26,391 --> 01:07:28,755
quantum teleportation
on the very next slide.

1741
01:07:28,756 --> 01:07:31,370
First, I want to tell
a funny story about this.

1742
01:07:31,371 --> 01:07:34,250
So, you may have

1743
01:07:34,251 --> 01:07:37,330
heard the phrase spooky
action at a distance.

1744
01:07:37,331 --> 01:07:40,625
This is Einstein coin that
he was referring to this.

1745
01:07:40,626 --> 01:07:42,980
So, Einstein,
Podolsky and Rosen are

1746
01:07:42,981 --> 01:07:45,080
three physicists who actually

1747
01:07:45,081 --> 01:07:46,900
came up with the idea
of quantum entanglement.

1748
01:07:46,901 --> 01:07:48,460
They call it the EPR paradox,

1749
01:07:48,461 --> 01:07:50,600
there like the workings of

1750
01:07:50,601 --> 01:07:54,055
quantum mechanics
result in this.

1751
01:07:54,056 --> 01:07:56,205
This is obviously
absurd therefore,

1752
01:07:56,206 --> 01:07:57,765
quantum mechanics is garbage,

1753
01:07:57,766 --> 01:07:59,495
was the basic argument.

1754
01:07:59,496 --> 01:08:02,690
But then the experiments came
out and they're like nope,

1755
01:08:02,691 --> 01:08:05,360
this is how it works,

1756
01:08:05,361 --> 01:08:07,590
the universe is in fact absurd,

1757
01:08:07,591 --> 01:08:12,410
locality is broken
and so it's kind of

1758
01:08:12,411 --> 01:08:14,860
funny that a deep
pair of paradox

1759
01:08:14,861 --> 01:08:17,880
is originally designed to
discredit quantum mechanics,

1760
01:08:17,881 --> 01:08:19,420
it turned out to be the actual

1761
01:08:19,421 --> 01:08:20,825
way that the universe works,

1762
01:08:20,826 --> 01:08:22,895
I think it's
a great little story.

1763
01:08:22,896 --> 01:08:26,125
Okay. Any other questions
about entanglement, yes.

1764
01:08:26,126 --> 01:08:29,120
>> Let's say the same
problem, the qubits.

1765
01:08:29,121 --> 01:08:29,780
>> Yes.

1766
01:08:29,781 --> 01:08:32,555
>> If we say that

1767
01:08:32,556 --> 01:08:34,525
this has a certain probability

1768
01:08:34,526 --> 01:08:36,540
collapsing to zero
collapsing to one,

1769
01:08:36,541 --> 01:08:38,970
and then we observe that
it collapses to one.

1770
01:08:38,971 --> 01:08:39,930
>> Yes.

1771
01:08:39,931 --> 01:08:43,300
>> How can we justify that
our presumption that it had

1772
01:08:43,301 --> 01:08:47,745
a probability of collapsing
to zero was valid?

1773
01:08:47,746 --> 01:08:50,025
>> Excellent question.

1774
01:08:50,026 --> 01:08:52,120
The answer is used a whole bunch
of times and you see

1775
01:08:52,121 --> 01:08:53,935
that you get a 50 percent
distribution of values.

1776
01:08:53,936 --> 01:08:57,800
>> Exactly they won't be
occurring at the same time.

1777
01:08:57,801 --> 01:08:59,155
>> Experimentally, we know

1778
01:08:59,156 --> 01:09:00,535
that they occur
at the same time.

1779
01:09:00,536 --> 01:09:02,230
With the 2013 experiment.

1780
01:09:02,231 --> 01:09:05,805
It entangled qubits took
them far apart it used.

1781
01:09:05,806 --> 01:09:08,815
>> No, I mean the same qubits.

1782
01:09:08,816 --> 01:09:10,510
>> Yes.

1783
01:09:10,511 --> 01:09:12,560
>> It happened at time X.

1784
01:09:12,561 --> 01:09:12,930
>> Yes.

1785
01:09:12,931 --> 01:09:15,440
>> And now you take
another pair of qubits

1786
01:09:15,441 --> 01:09:17,260
and this is another pair of

1787
01:09:17,261 --> 01:09:19,200
qubits but not
necessarily the same ones.

1788
01:09:19,201 --> 01:09:19,925
>> Yes.

1789
01:09:19,926 --> 01:09:22,960
>> So, until it
happened at that time,

1790
01:09:22,961 --> 01:09:25,010
that space or whatever,

1791
01:09:25,011 --> 01:09:27,375
you can't really tell that

1792
01:09:27,376 --> 01:09:30,755
this was happening
with probability.

1793
01:09:30,756 --> 01:09:31,925
>> One half.

1794
01:09:31,926 --> 01:09:32,360
>> Yes.

1795
01:09:32,361 --> 01:09:33,530
>> You're questioning, okay so,

1796
01:09:33,531 --> 01:09:34,770
they could have
decided ahead of time

1797
01:09:34,771 --> 01:09:36,090
for example maybe or.

1798
01:09:36,091 --> 01:09:39,240
>> Yeah, or probably
the language of probability

1799
01:09:39,241 --> 01:09:44,410
itself is not active.

1800
01:09:44,411 --> 01:09:47,220
>> It works. Probability
works I mean,

1801
01:09:47,221 --> 01:09:51,340
it's just the amplitude
squared gives

1802
01:09:51,341 --> 01:09:52,770
you the classical
probability of it

1803
01:09:52,771 --> 01:09:55,525
collapsing on
zero or one I guess.

1804
01:09:55,526 --> 01:09:59,550
I'm not a 100 percent sure
what you're driving at, so.

1805
01:09:59,551 --> 01:10:04,025
>> So, The question is once
observed then we rationalize.

1806
01:10:04,026 --> 01:10:06,285
>> Once observed then
we rationalize, yes.

1807
01:10:06,286 --> 01:10:07,850
And then if we do the experiment

1808
01:10:07,851 --> 01:10:09,000
a whole bunch of times we

1809
01:10:09,001 --> 01:10:10,380
see that it's about
a 50 percent chance

1810
01:10:10,381 --> 01:10:12,055
of them both being
zero or both being one.

1811
01:10:12,056 --> 01:10:14,030
Which in fact, I will
show that to you live on

1812
01:10:14,031 --> 01:10:17,640
a quantum computer
that we do that, okay.

1813
01:10:17,641 --> 01:10:19,475
All right, let's move on

1814
01:10:19,476 --> 01:10:23,230
teleportation This is
the actual use which you

1815
01:10:23,231 --> 01:10:25,780
asked about and you've

1816
01:10:25,781 --> 01:10:27,040
probably read about
quantum teleportation

1817
01:10:27,041 --> 01:10:28,800
again in pop science articles.

1818
01:10:28,801 --> 01:10:32,270
Needless to say, their
explanation was complete trash,

1819
01:10:32,271 --> 01:10:34,110
made no sense at all,
but now it will make

1820
01:10:34,111 --> 01:10:35,790
sense to you, okay?

1821
01:10:35,791 --> 01:10:37,410
It's the process by

1822
01:10:37,411 --> 01:10:39,630
which we take
an arbitrary qubit state,

1823
01:10:39,631 --> 01:10:43,245
and transfer it across space
and time somewhere else.

1824
01:10:43,246 --> 01:10:47,830
So, you use entangled
qubits as a sort of

1825
01:10:47,831 --> 01:10:52,715
bridge to send a qubit
from one place to another.

1826
01:10:52,716 --> 01:10:55,710
And here's a very
important thing

1827
01:10:55,711 --> 01:10:57,875
it's called the
no-cloning theorem.

1828
01:10:57,876 --> 01:10:59,630
You can transfer qubit states

1829
01:10:59,631 --> 01:11:00,880
so you can cut and paste them,

1830
01:11:00,881 --> 01:11:02,760
but you cannot copy them,

1831
01:11:02,761 --> 01:11:04,000
you cannot copy and

1832
01:11:04,001 --> 01:11:05,990
paste a qubit state,
you cannot clone it.

1833
01:11:05,991 --> 01:11:07,720
This is called the
no-cloning theorem.

1834
01:11:07,721 --> 01:11:11,070
It's actually pretty simple
to prove you just show that

1835
01:11:11,071 --> 01:11:12,590
any off-such operation would not

1836
01:11:12,591 --> 01:11:14,990
be reversible or
its own inverse,

1837
01:11:14,991 --> 01:11:16,915
but we're not going
to go do that.

1838
01:11:16,916 --> 01:11:18,160
And, here's an
important thing, the

1839
01:11:18,161 --> 01:11:20,110
teleportation despite using a

1840
01:11:20,111 --> 01:11:23,320
faster than light phenomenon
of entanglement,

1841
01:11:23,321 --> 01:11:24,970
is not itself the whole protocol

1842
01:11:24,971 --> 01:11:26,475
is not itself faster than light

1843
01:11:26,476 --> 01:11:28,620
for communication because you

1844
01:11:28,621 --> 01:11:30,815
actually must exchange
two classical bits.

1845
01:11:30,816 --> 01:11:33,920
So, if I'm teleporting
my qubit to you in addition,

1846
01:11:33,921 --> 01:11:35,920
to us having
an entangled qubit pair,

1847
01:11:35,921 --> 01:11:37,570
I also have to send you
two bits of information

1848
01:11:37,571 --> 01:11:39,500
and we'll show why that
is in the next slide.

1849
01:11:39,501 --> 01:11:41,495
So, everyone kind of
conceptually grasp

1850
01:11:41,496 --> 01:11:44,980
the purpose of
quantum teleportation?

1851
01:11:44,981 --> 01:11:48,475
Okay. So, here's what
the circuit looks like.

1852
01:11:48,476 --> 01:11:50,385
We're not going to go
over the math, there

1853
01:11:50,386 --> 01:11:52,465
are appendices to
this slide deck

1854
01:11:52,466 --> 01:11:54,760
which you can see
after the class to

1855
01:11:54,761 --> 01:11:55,730
go over the math
but it gets a bit

1856
01:11:55,731 --> 01:11:57,425
complicated so we're
not going to do it.

1857
01:11:57,426 --> 01:12:00,120
So, we have the qubit
that we want to teleport

1858
01:12:00,121 --> 01:12:02,870
here we call it T
and its value is phi,

1859
01:12:02,871 --> 01:12:05,230
is just this generic qubit value
can be any value.

1860
01:12:05,231 --> 01:12:06,390
And then, we have

1861
01:12:06,391 --> 01:12:07,480
these two qubits A and

1862
01:12:07,481 --> 01:12:09,565
B which are both
initialized to zero.

1863
01:12:09,566 --> 01:12:13,015
Now, you will recall this
is the entanglement circuit.

1864
01:12:13,016 --> 01:12:16,355
So these two qubits are
entangled, all right?

1865
01:12:16,356 --> 01:12:17,935
Now after they're entangled,

1866
01:12:17,936 --> 01:12:20,025
we'll say we have Alice and Bob.

1867
01:12:20,026 --> 01:12:22,975
Alice wants to send her
entangled qubit to Bob.

1868
01:12:22,976 --> 01:12:26,500
So, Alice has these two qubits,

1869
01:12:26,501 --> 01:12:28,175
Bob has this qubit.

1870
01:12:28,176 --> 01:12:31,195
And these two qubits
are entangled.

1871
01:12:31,196 --> 01:12:33,350
So, the qubits are like

1872
01:12:33,351 --> 01:12:34,620
these two qubits
are separated right

1873
01:12:34,621 --> 01:12:36,495
after being
entangled, basically.

1874
01:12:36,496 --> 01:12:40,525
Now, Alice then entangles

1875
01:12:40,526 --> 01:12:42,680
her qubit she wants

1876
01:12:42,681 --> 01:12:44,750
to teleport with
the other two qubits.

1877
01:12:44,751 --> 01:12:46,530
So it's a three qubit
entangled system.

1878
01:12:46,531 --> 01:12:47,220
If you were to write out

1879
01:12:47,221 --> 01:12:48,660
the product state you
wouldn't be able to factor

1880
01:12:48,661 --> 01:12:51,275
it into three qubits.

1881
01:12:51,276 --> 01:12:55,615
Then she puts this qubit
through the hadamard gate.

1882
01:12:55,616 --> 01:12:59,685
Finally, Alice measures
both qubits in her possession,

1883
01:12:59,686 --> 01:13:03,090
and this results in
two classical bits.

1884
01:13:03,091 --> 01:13:07,280
These are the two bits that
Alice has to send to Bob,

1885
01:13:07,281 --> 01:13:09,370
and the measurement result of

1886
01:13:09,371 --> 01:13:11,590
this bit determines whether Bob

1887
01:13:11,591 --> 01:13:16,625
has to run his qubit through
an X or bit flip gate.

1888
01:13:16,626 --> 01:13:18,030
And the measurement result of

1889
01:13:18,031 --> 01:13:21,970
this qubit to controls whether
Bob has to run this qubit

1890
01:13:21,971 --> 01:13:23,220
through a new type
of gate which we

1891
01:13:23,221 --> 01:13:24,640
haven't seen before
is called the phase

1892
01:13:24,641 --> 01:13:29,410
flip gate or Z and this is
what the matrix looks like.

1893
01:13:29,411 --> 01:13:32,720
And basically, once Bob has

1894
01:13:32,721 --> 01:13:35,500
applied those two gates
or neither gate,

1895
01:13:35,501 --> 01:13:36,870
if both of these end up been

1896
01:13:36,871 --> 01:13:38,735
zero Bob doesn't have
to apply anything,

1897
01:13:38,736 --> 01:13:40,420
he'll end up somewhat magically

1898
01:13:40,421 --> 01:13:44,185
with Alice's qubit value
she wants to teleport.

1899
01:13:44,186 --> 01:13:48,820
Pretty nifty. And you might
be like while we already

1900
01:13:48,821 --> 01:13:51,140
exchanging a qubit here
why do we even care

1901
01:13:51,141 --> 01:13:54,055
like we're obviously just
giving a qubit to Bob,

1902
01:13:54,056 --> 01:13:57,705
can't Alice just give
her a qubit right there?

1903
01:13:57,706 --> 01:14:00,510
So, what you can do is you can

1904
01:14:00,511 --> 01:14:03,320
pre-entangle a whole bunch of

1905
01:14:03,321 --> 01:14:05,750
qubits a few billion
qubits or something.

1906
01:14:05,751 --> 01:14:09,390
And then you ship them by mail
they're called EPR halves.

1907
01:14:09,391 --> 01:14:12,090
You ship them by mail or
something so Alice and Bob

1908
01:14:12,091 --> 01:14:15,160
have a big repository of
these entangled qubits,

1909
01:14:15,161 --> 01:14:17,010
and then anytime Alice
wants to send to a qubit to

1910
01:14:17,011 --> 01:14:20,565
Bob she can just use up
one of the EPR pairs.

1911
01:14:20,566 --> 01:14:23,250
And at that point,

1912
01:14:23,251 --> 01:14:26,250
that EPR pair has been collapsed

1913
01:14:26,251 --> 01:14:29,525
can no longer be used so
it's non-renewable resource.

1914
01:14:29,526 --> 01:14:31,100
But Alice can just send

1915
01:14:31,101 --> 01:14:33,630
as many qubits as she
wants over to Bob.

1916
01:14:33,631 --> 01:14:35,990
Okay? Now, you might be saying,

1917
01:14:35,991 --> 01:14:37,395
"Well I don't really get this."

1918
01:14:37,396 --> 01:14:38,650
The math is in the appendix if

1919
01:14:38,651 --> 01:14:39,850
you really want to go see it.

1920
01:14:39,851 --> 01:14:41,875
It gets pretty complicated,

1921
01:14:41,876 --> 01:14:45,670
but I think I did
an okay job of explaining it.

1922
01:14:45,671 --> 01:14:50,385
Okay, you might be like "Okay."

1923
01:14:50,386 --> 01:14:55,175
Oh by the way, I forgot to
say, really important thing.

1924
01:14:55,176 --> 01:14:57,350
You may have heard
that we can simulate

1925
01:14:57,351 --> 01:14:58,740
quantum computers on
a classical computer

1926
01:14:58,741 --> 01:15:01,760
but it takes exponential
slowdown or exponential memory.

1927
01:15:01,761 --> 01:15:05,040
This is the reason,
if two qubits

1928
01:15:05,041 --> 01:15:06,820
become entangled you have to

1929
01:15:06,821 --> 01:15:09,165
keep their full
product state around.

1930
01:15:09,166 --> 01:15:11,860
So, if N qubit with
become entangled

1931
01:15:11,861 --> 01:15:12,990
you have a vector of size

1932
01:15:12,991 --> 01:15:14,755
two to the N you have
to keep in memory.

1933
01:15:14,756 --> 01:15:16,300
And that is why, it takes

1934
01:15:16,301 --> 01:15:18,630
exponential memory to simulate

1935
01:15:18,631 --> 01:15:21,020
a quantum computer on
a classical computer.

1936
01:15:21,021 --> 01:15:22,700
Pretty nifty, okay.

1937
01:15:22,701 --> 01:15:24,080
So maybe you're like,

1938
01:15:24,081 --> 01:15:24,650
"Okay this is all pretty

1939
01:15:24,651 --> 01:15:26,200
interesting, further
learning goals."

1940
01:15:26,201 --> 01:15:28,150
You can learn the
Deutsch-Jozsa algorithm that's

1941
01:15:28,151 --> 01:15:30,495
the one with N bits
that I talked about,

1942
01:15:30,496 --> 01:15:33,215
and also Simon's periodicity
problem which is another,

1943
01:15:33,216 --> 01:15:35,365
I figured out some property
about this function.

1944
01:15:35,366 --> 01:15:37,740
We're not going to talk about
the complexity stuff but

1945
01:15:37,741 --> 01:15:38,410
anyway you can also learn

1946
01:15:38,411 --> 01:15:40,160
Shor's algorithm,
Grover's algorithm,

1947
01:15:40,161 --> 01:15:41,930
Quantum cryptographic
key exchange,

1948
01:15:41,931 --> 01:15:42,945
that one's actually
pretty simple

1949
01:15:42,946 --> 01:15:44,990
I recommend looking at that.

1950
01:15:44,991 --> 01:15:46,350
You can learn how
they're actually

1951
01:15:46,351 --> 01:15:47,780
implemented in physical terms,

1952
01:15:47,781 --> 01:15:49,135
if you care about that.

1953
01:15:49,136 --> 01:15:51,210
An important thing quantum
error correction since

1954
01:15:51,211 --> 01:15:54,810
these systems are so small
like a spare cosmic gray could

1955
01:15:54,811 --> 01:15:56,070
just come out of
nowhere and just wreck

1956
01:15:56,071 --> 01:15:57,850
your entire computation you

1957
01:15:57,851 --> 01:16:01,185
need very very stringent
error Correction Schemes.

1958
01:16:01,186 --> 01:16:04,790
So, I think
theoretically it takes

1959
01:16:04,791 --> 01:16:06,460
five physical qubits for

1960
01:16:06,461 --> 01:16:08,870
a single logical qubit like
we've been operating that.

1961
01:16:08,871 --> 01:16:10,900
In practice, is looking
more like we'll need one

1962
01:16:10,901 --> 01:16:12,650
or two hundred to get a qubit

1963
01:16:12,651 --> 01:16:15,010
of 100 percent probability

1964
01:16:15,011 --> 01:16:17,040
like we've been
using pretty much.

1965
01:16:17,041 --> 01:16:18,660
So that's something
to keep in mind.

1966
01:16:18,661 --> 01:16:20,460
When we see Google's
coming out with

1967
01:16:20,461 --> 01:16:21,640
a 30 qubit computer that

1968
01:16:21,641 --> 01:16:24,435
maybe doesn't mean
as much as we'd hope.

1969
01:16:24,436 --> 01:16:27,290
We've made only guys like

1970
01:16:27,291 --> 01:16:29,660
two or three really
high-quality qubits.

1971
01:16:29,661 --> 01:16:31,970
And also quantum programming
language design which

1972
01:16:31,971 --> 01:16:34,115
I will go over
because I'll show you

1973
01:16:34,116 --> 01:16:40,000
a Q sharp example but anyway,
recommended textbooks.

1974
01:16:40,001 --> 01:16:41,590
This one is
my absolute favorite,

1975
01:16:41,591 --> 01:16:42,620
has the same title,

1976
01:16:42,621 --> 01:16:43,390
has the name of the talk,

1977
01:16:43,391 --> 01:16:45,380
Quantum Computing for
Computer Scientists.

1978
01:16:45,381 --> 01:16:47,630
This algorithm is by
our friend David Mermin,

1979
01:16:47,631 --> 01:16:49,215
the shut up and calculate guy.

1980
01:16:49,216 --> 01:16:51,110
It is a meat grinder of

1981
01:16:51,111 --> 01:16:53,600
a textbook but I started
out with this one.

1982
01:16:53,601 --> 01:16:55,735
It was horrifying,
it was just like,

1983
01:16:55,736 --> 01:16:58,020
but it skips a lot
of steps basically.

1984
01:16:58,021 --> 01:16:59,630
It's more symbolic manipulation.

1985
01:16:59,631 --> 01:17:01,680
You won't see as many
vectors and matrices.

1986
01:17:01,681 --> 01:17:03,330
I like to write
out the vectors and

1987
01:17:03,331 --> 01:17:05,390
matrices to see what's
going on which gets

1988
01:17:05,391 --> 01:17:07,360
really unwieldy when
you're writing out like

1989
01:17:07,361 --> 01:17:10,895
a 64 by 64 vector or matrix.

1990
01:17:10,896 --> 01:17:13,155
But I like to have
both of these.

1991
01:17:13,156 --> 01:17:15,780
So, I'll use this to fill
in the gaps with this.

1992
01:17:15,781 --> 01:17:18,010
This has more interesting sides,
stuff like that.

1993
01:17:18,011 --> 01:17:19,675
This is also in the MS library.

1994
01:17:19,676 --> 01:17:21,050
There's another one called

1995
01:17:21,051 --> 01:17:22,380
Quantum Computing
Gentle Interaction,

1996
01:17:22,381 --> 01:17:23,220
also in the MS library.

1997
01:17:23,221 --> 01:17:24,835
I've heard mixed reviews or

1998
01:17:24,836 --> 01:17:27,795
semi decent reviews of it. I
haven't looked at it myself.

1999
01:17:27,796 --> 01:17:30,180
There is also Mix of
Quantum Development kit.

2000
01:17:30,181 --> 01:17:31,785
They have the docs.

2001
01:17:31,786 --> 01:17:32,990
They're actually
pretty nice thing called

2002
01:17:32,991 --> 01:17:35,455
the Quantum Computing Simulator
and Q Sharp as we'll see.

2003
01:17:35,456 --> 01:17:37,850
Now, I said I would
end the talk on

2004
01:17:37,851 --> 01:17:41,430
some skepticism which
there's an article,

2005
01:17:41,431 --> 01:17:42,130
came out I think was

2006
01:17:42,131 --> 01:17:44,210
Quantum Magazine pretty
prominent recently,

2007
01:17:44,211 --> 01:17:48,075
interview with
a mathematician who believes

2008
01:17:48,076 --> 01:17:49,920
that physically realizable

2009
01:17:49,921 --> 01:17:52,600
quantum computers cannot exist.

2010
01:17:52,601 --> 01:17:56,140
His basic argument simplifying
is that the amount of

2011
01:17:56,141 --> 01:17:57,550
noise in the system grows

2012
01:17:57,551 --> 01:18:00,150
exponentially with
the number of qubits.

2013
01:18:00,151 --> 01:18:04,515
So we cannot get a really
large qubit system because

2014
01:18:04,516 --> 01:18:08,190
our computation will
just keep collapsing

2015
01:18:08,191 --> 01:18:09,300
in the middle of it and

2016
01:18:09,301 --> 01:18:11,780
it's just like
an exponential term.

2017
01:18:11,781 --> 01:18:16,020
And so, I'll be very
sad if this happened.

2018
01:18:16,021 --> 01:18:18,390
I'd feel like the universe
is against me.

2019
01:18:18,391 --> 01:18:20,800
It'd be really,
it'd be very sad if

2020
01:18:20,801 --> 01:18:22,720
we could not realize
the benefits of

2021
01:18:22,721 --> 01:18:26,860
Quantum Computing,
like cosmetically sad.

2022
01:18:26,861 --> 01:18:28,920
But anyway, you can't argue with

2023
01:18:28,921 --> 01:18:30,720
the universe and yeah

2024
01:18:30,721 --> 01:18:32,400
you can read that article
for some skepticism.

2025
01:18:32,401 --> 01:18:36,075
I think his name is Gil Kali,
is the mathematician.

2026
01:18:36,076 --> 01:18:38,520
There's some appendices but

2027
01:18:38,521 --> 01:18:40,460
I'm going to do some demos now.

2028
01:18:40,461 --> 01:18:43,490
Okay, the first demo is

2029
01:18:43,491 --> 01:18:45,605
just the Doge Oracle
problem in Q sharp.

2030
01:18:45,606 --> 01:18:47,835
So Q sharp is based on F-Sharp

2031
01:18:47,836 --> 01:18:51,960
and we have this function
I've written,

2032
01:18:51,961 --> 01:18:53,635
IsBlackBoxConstant.

2033
01:18:53,636 --> 01:18:55,260
You've taken a black box
and they tell

2034
01:18:55,261 --> 01:18:57,300
you whether it's constant.

2035
01:18:57,301 --> 01:19:00,830
Oh, gosh, sorry.
Here, of course.

2036
01:19:00,831 --> 01:19:04,580
Okay. We have our function
IsBlackBoxConstant

2037
01:19:04,581 --> 01:19:06,480
where it takes in
a black box and it just

2038
01:19:06,481 --> 01:19:08,925
returns the Bool. Is
it constant or not?

2039
01:19:08,926 --> 01:19:11,905
And it just uses
this same protocol we went over.

2040
01:19:11,906 --> 01:19:13,310
It allocates two qubits,

2041
01:19:13,311 --> 01:19:15,420
calls one input one
output, clears them,

2042
01:19:15,421 --> 01:19:17,480
sets them both to zero,
does the preprocessing,

2043
01:19:17,481 --> 01:19:19,835
flips them, puts them
through the Hadamard gate.

2044
01:19:19,836 --> 01:19:22,345
Then it sends them
into the black box.

2045
01:19:22,346 --> 01:19:24,530
Afterward, it again
put some through

2046
01:19:24,531 --> 01:19:27,030
the Hadamard gate
and then it measures

2047
01:19:27,031 --> 01:19:31,620
both of them and again if
the input results is one,

2048
01:19:31,621 --> 01:19:34,460
then it's constant
otherwise its variable.

2049
01:19:34,461 --> 01:19:37,820
Okay? We have our black boxes

2050
01:19:37,821 --> 01:19:39,360
defined here. So, ConstantZero.

2051
01:19:39,361 --> 01:19:41,065
Again, remember it's nothing.

2052
01:19:41,066 --> 01:19:44,845
For ConstantOne we
flip the output bit.

2053
01:19:44,846 --> 01:19:48,350
For Identity we run
a CNOT gate with

2054
01:19:48,351 --> 01:19:49,950
input control up it is target

2055
01:19:49,951 --> 01:19:52,600
and Negation reducing
our next, okay?

2056
01:19:52,601 --> 01:19:54,400
And we just have these,

2057
01:19:54,401 --> 01:19:56,445
like IsZeroConstantZero I call.

2058
01:19:56,446 --> 01:19:59,015
Is BlackBoxConstant
with ConstantZero?

2059
01:19:59,016 --> 01:20:01,045
And then we have
our classical driver.

2060
01:20:01,046 --> 01:20:03,080
Any quantum computation
will have a sort of

2061
01:20:03,081 --> 01:20:05,775
classical computer to
tell it what to do,

2062
01:20:05,776 --> 01:20:08,105
and so I ask

2063
01:20:08,106 --> 01:20:10,135
for each of those four,
well, what's going on?

2064
01:20:10,136 --> 01:20:14,620
And we can run it and it
runs on a simulator and we

2065
01:20:14,621 --> 01:20:20,015
see the output,
IsConstantZero constant?

2066
01:20:20,016 --> 01:20:21,765
True. ConstantOne constant?

2067
01:20:21,766 --> 01:20:23,545
True. Identity constant?

2068
01:20:23,546 --> 01:20:24,680
False. Negation constant?

2069
01:20:24,681 --> 01:20:26,490
False. So there you go.

2070
01:20:26,491 --> 01:20:28,250
Yeah we wrote the Doge article,

2071
01:20:28,251 --> 01:20:30,290
ran it on a real
quantum simulator,

2072
01:20:30,291 --> 01:20:31,905
you saw that it worked out.

2073
01:20:31,906 --> 01:20:33,350
Okay, the final demo of

2074
01:20:33,351 --> 01:20:35,390
the day and then I'll
let you get out of

2075
01:20:35,391 --> 01:20:40,660
here is here we go.

2076
01:20:40,661 --> 01:20:44,425
This is called the IBM
quantum experience.

2077
01:20:44,426 --> 01:20:46,530
There is a real like

2078
01:20:46,531 --> 01:20:49,115
world quantum computer
that IBM has built.

2079
01:20:49,116 --> 01:20:53,750
It only has five qubits but
they just let you online

2080
01:20:53,751 --> 01:20:56,140
just drag gates onto

2081
01:20:56,141 --> 01:20:57,270
this quantum circuit diagram and

2082
01:20:57,271 --> 01:20:58,735
run it on a real
quantum computer.

2083
01:20:58,736 --> 01:21:01,350
So I thought it'd be pretty
nifty if we demonstrated

2084
01:21:01,351 --> 01:21:05,360
entanglement live for
you on stage. Let's see.

2085
01:21:05,361 --> 01:21:07,900
So, if you remember
the first thing we do

2086
01:21:07,901 --> 01:21:10,410
is we drag a Hadamard gate onto

2087
01:21:10,411 --> 01:21:17,410
one debt and then we use
the control not, oh no, okay.

2088
01:21:17,411 --> 01:21:18,520
So, the way that

2089
01:21:18,521 --> 01:21:20,275
quantum computers are
constructed you can only

2090
01:21:20,276 --> 01:21:22,500
usually put CNOT between

2091
01:21:22,501 --> 01:21:25,735
certain debts basically
it's just kind of,

2092
01:21:25,736 --> 01:21:28,470
otherwise it's just
mechanically impossible to see.

2093
01:21:28,471 --> 01:21:31,150
Can we do that? Nope, okay.

2094
01:21:31,151 --> 01:21:39,565
How about, success.

2095
01:21:39,566 --> 01:21:41,120
Okay, we did it.

2096
01:21:41,121 --> 01:21:44,480
This is the CNOT gate.

2097
01:21:44,481 --> 01:21:46,180
You can see varying
representations

2098
01:21:46,181 --> 01:21:47,945
of it. It's like the opass.

2099
01:21:47,946 --> 01:21:51,090
And I say we'll run it on

2100
01:21:51,091 --> 01:21:54,175
a quantum computer, oh
right, measurement gates.

2101
01:21:54,176 --> 01:21:55,290
I forgot. We need to add

2102
01:21:55,291 --> 01:21:57,700
the two measurement
gates obviously.

2103
01:21:57,701 --> 01:21:59,270
So we're measuring

2104
01:21:59,271 --> 01:22:01,020
both these qubits
after entangling them.

2105
01:22:01,021 --> 01:22:03,740
And what we expect is to
see them predominantly been

2106
01:22:03,741 --> 01:22:07,455
0-0 and 1-1 right?
Well, let's test it.

2107
01:22:07,456 --> 01:22:12,585
We'll call it that and

2108
01:22:12,586 --> 01:22:13,870
we can save the result from

2109
01:22:13,871 --> 01:22:16,990
cache but I want to do
it live for you guys,

2110
01:22:16,991 --> 01:22:20,035
so I'm going to run
a new execution.

2111
01:22:20,036 --> 01:22:24,535
And you can imagine right
now deep at IBM Research Lab

2112
01:22:24,536 --> 01:22:27,380
nestled within
a dilution refrigerator

2113
01:22:27,381 --> 01:22:29,965
operating at slightly
above absolute zero,

2114
01:22:29,966 --> 01:22:31,550
we have real qubits being

2115
01:22:31,551 --> 01:22:33,180
entangled and
measured thousands of

2116
01:22:33,181 --> 01:22:37,050
times for our entertainment.
That's pretty cool.

2117
01:22:37,051 --> 01:22:37,590
>> It is.

2118
01:22:37,591 --> 01:22:39,105
>> That's pretty cool.

2119
01:22:39,106 --> 01:22:41,715
Okay, let's see if it's,

2120
01:22:41,716 --> 01:22:44,230
oh here we go, we
got the results.

2121
01:22:44,231 --> 01:22:50,020
And executions
it's pending, okay.

2122
01:22:50,021 --> 01:22:52,045
So it might take
a couple minutes.

2123
01:22:52,046 --> 01:22:53,110
We're going to see now.

2124
01:22:53,111 --> 01:22:54,690
Does anyone have
any questions while we're

2125
01:22:54,691 --> 01:22:56,440
waiting for this? Yes.

2126
01:22:56,441 --> 01:22:57,030
>> I don't know what question.

2127
01:22:57,031 --> 01:22:58,100
You said this experiment where

2128
01:22:58,101 --> 01:23:00,490
this sentiment tangled qubit
to space and the satellite?

2129
01:23:00,491 --> 01:23:00,920
>> Yes.

2130
01:23:00,921 --> 01:23:04,220
>> Are we good at storing
like qubits for a long time?

2131
01:23:04,221 --> 01:23:05,420
I'm really surprised
they were able to

2132
01:23:05,421 --> 01:23:06,850
do that. I thought
they kind of...

2133
01:23:06,851 --> 01:23:08,770
>> Yeah, yeah, that
was actually a lot.

2134
01:23:08,771 --> 01:23:11,310
They will manage to send
the entangled qubit up

2135
01:23:11,311 --> 01:23:13,840
file laser but, yes.

2136
01:23:13,841 --> 01:23:14,520
>> Okay.

2137
01:23:14,521 --> 01:23:15,630
>> I don't think
we're that good at

2138
01:23:15,631 --> 01:23:16,900
storing qubits for awhile.

2139
01:23:16,901 --> 01:23:18,400
I think they're
fairly short-lived.

2140
01:23:18,401 --> 01:23:18,401
>> [inaudible]

2141
01:23:18,402 --> 01:23:22,325
>> Yeah, they actually,

2142
01:23:22,326 --> 01:23:24,220
this Chinese
satellite experiment,

2143
01:23:24,221 --> 01:23:25,675
they teleported
a qubit up there.

2144
01:23:25,676 --> 01:23:29,350
So they sent one EPR half up
by a laser and then they use

2145
01:23:29,351 --> 01:23:31,110
that EPR half to teleport

2146
01:23:31,111 --> 01:23:33,410
the qubit up there. Pretty cool.

2147
01:23:33,411 --> 01:23:33,810
>> That's awesome.

2148
01:23:33,811 --> 01:23:34,010
>> Yeah.

2149
01:23:34,011 --> 01:23:35,820
>> So we can send
entangled qubits by laser?

2150
01:23:35,821 --> 01:23:38,255
>> You can send entangled
qubits by laser, yes.

2151
01:23:38,256 --> 01:23:39,390
>> Okay, that's even cool.

2152
01:23:39,391 --> 01:23:46,765
>> Yeah. Let's see,
it's still not.

2153
01:23:46,766 --> 01:23:49,045
Okay, that's fine. Anyway, yes.

2154
01:23:49,046 --> 01:23:50,850
>> You mentioned that there's

2155
01:23:50,851 --> 01:23:52,450
this new article by

2156
01:23:52,451 --> 01:23:55,310
the mathematician that says
the noise has grown faster.

2157
01:23:55,311 --> 01:23:55,600
>> Yes.

2158
01:23:55,601 --> 01:23:57,490
>> What is the whole purpose of

2159
01:23:57,491 --> 01:24:00,670
a topological quantum
computer resist that.

2160
01:24:00,671 --> 01:24:01,835
>> Of course.

2161
01:24:01,836 --> 01:24:04,045
Any corner computer will
have issues with noise.

2162
01:24:04,046 --> 01:24:05,470
The topological quantum computer

2163
01:24:05,471 --> 01:24:06,600
is supposed to be better than

2164
01:24:06,601 --> 01:24:09,390
its IBM counterparts in

2165
01:24:09,391 --> 01:24:15,495
terms of noise but it'll
still grow exponentially.

2166
01:24:15,496 --> 01:24:16,970
Like it can still
be better but it

2167
01:24:16,971 --> 01:24:18,420
still runs into
exponential barrier.

2168
01:24:18,421 --> 01:24:20,010
And so the next couple of years

2169
01:24:20,011 --> 01:24:21,630
are really sort of
make or break for

2170
01:24:21,631 --> 01:24:26,280
quantum computing because
we'll now have the ability to

2171
01:24:26,281 --> 01:24:28,000
create computers which run into

2172
01:24:28,001 --> 01:24:31,845
this exponential term if
it exists, if it exists.

2173
01:24:31,846 --> 01:24:33,860
And so we will see with
the next couple of years whether

2174
01:24:33,861 --> 01:24:36,015
quantum computing is
really possible or not.

2175
01:24:36,016 --> 01:24:41,285
It's nervous and it makes
me nervous but yeah,

2176
01:24:41,286 --> 01:24:43,190
because we'll run into

2177
01:24:43,191 --> 01:24:45,230
this limit probably
like this year.

2178
01:24:45,231 --> 01:24:46,960
If Google does not

2179
01:24:46,961 --> 01:24:48,810
manage to demonstrate
quantum supremacy

2180
01:24:48,811 --> 01:24:52,785
it'll be a bit scary
I guess but yeah.

2181
01:24:52,786 --> 01:24:56,490
Let's see, we don't have, I'm
just going to refresh this.

2182
01:24:56,491 --> 01:24:56,810
>> Question.

2183
01:24:56,811 --> 01:24:57,215
>> Yes.

2184
01:24:57,216 --> 01:24:58,610
>> Do we know what Google

2185
01:24:58,611 --> 01:25:00,490
uses Quantum theorem
for, like what?

2186
01:25:00,491 --> 01:25:03,320
>> What they use it for?

2187
01:25:03,321 --> 01:25:04,030
>> Yeah.

2188
01:25:04,031 --> 01:25:07,110
>> I don't believe we do.
I think they just have...

2189
01:25:07,111 --> 01:25:12,420
>> Is it experimental mostly?

2190
01:25:12,421 --> 01:25:14,050
>> Actually no.

2191
01:25:14,051 --> 01:25:16,750
They haven't announced
what they use it for.

2192
01:25:16,751 --> 01:25:18,410
My manager is actually
playing around with

2193
01:25:18,411 --> 01:25:20,680
the D-Wave simulator to...

2194
01:25:20,681 --> 01:25:23,220
>> The Canadian company.
Is it the Canadian company?

2195
01:25:23,221 --> 01:25:24,800
>> D-Wave is Canadian company.

2196
01:25:24,801 --> 01:25:26,030
Yeah, everyone out there is

2197
01:25:26,031 --> 01:25:27,180
like really scammy
and not really

2198
01:25:27,181 --> 01:25:28,860
quantum but everyone
kind of believes

2199
01:25:28,861 --> 01:25:30,660
that they're quantum but
it's a different paradigm.

2200
01:25:30,661 --> 01:25:32,420
It's like optimization basically

2201
01:25:32,421 --> 01:25:34,395
but it uses quantum computing.

2202
01:25:34,396 --> 01:25:36,400
They have a simulator
you can use.

2203
01:25:36,401 --> 01:25:38,010
My manager has been using it to

2204
01:25:38,011 --> 01:25:40,595
kind of play around with
finding routes in a network.

2205
01:25:40,596 --> 01:25:42,150
It has general applications like

2206
01:25:42,151 --> 01:25:46,220
that. Well, this
is taking a lot.

2207
01:25:46,221 --> 01:25:48,340
>> The data is publicly
available somewhere?

2208
01:25:48,341 --> 01:25:50,295
>> Yeah, it's in the invitation

2209
01:25:50,296 --> 01:25:52,795
and I think it'll
probably be posted

2210
01:25:52,796 --> 01:25:59,440
on their resonant website
or posted online.

2211
01:25:59,441 --> 01:26:00,930
>> So that application is like

2212
01:26:00,931 --> 01:26:02,685
a requesters type
of application?

2213
01:26:02,686 --> 01:26:03,960
>> Yeah, yeah, it's like...

2214
01:26:03,961 --> 01:26:05,495
It's optimized.

2215
01:26:05,496 --> 01:26:08,190
You're able to express

2216
01:26:08,191 --> 01:26:10,910
the network graph
in terms that like

2217
01:26:10,911 --> 01:26:15,000
an optimization result
would be like

2218
01:26:15,001 --> 01:26:17,140
the least energy path
in terms of like

2219
01:26:17,141 --> 01:26:20,650
the least cost path
through the graph sort of.

2220
01:26:20,651 --> 01:26:22,740
That's different than
the way the [inaudible].

2221
01:26:22,741 --> 01:26:25,160
>> Open Shortest Path.

2222
01:26:25,161 --> 01:26:27,840
>> Come on, why isn't it going?

2223
01:26:27,841 --> 01:26:30,540
Pending. I'll be
really sad if this

2224
01:26:30,541 --> 01:26:34,250
doesn't finish in time. Oh well.

2225
01:26:34,251 --> 01:26:35,620
>> So on D-Wave,

2226
01:26:35,621 --> 01:26:38,035
how are presentations
centered you could do

2227
01:26:38,036 --> 01:26:41,100
classically faster than
when they were doing.

2228
01:26:41,101 --> 01:26:42,615
So, they've improved in that or?

2229
01:26:42,616 --> 01:26:46,200
>> I don't know actually I
haven't looked into that.

2230
01:26:46,201 --> 01:26:48,565
They're probably about
comparable I would say.

2231
01:26:48,566 --> 01:26:49,895
Because given that
it's just like

2232
01:26:49,896 --> 01:26:52,440
optimization and especially
with the explosion of

2233
01:26:52,441 --> 01:26:54,060
machine learning there's been

2234
01:26:54,061 --> 01:26:56,505
a lot of development in
making optimization better.

2235
01:26:56,506 --> 01:26:58,770
Optimization is like you
have a surface and you're

2236
01:26:58,771 --> 01:27:01,410
trying to find the highest point
or the lowest point.

2237
01:27:01,411 --> 01:27:06,845
So there's been a lot of
research that goes into that.

2238
01:27:06,846 --> 01:27:15,210
We'll just run it
from cache and okay.

2239
01:27:15,360 --> 01:27:19,330
Here we go, okay. So here's
the results from cache.

2240
01:27:19,331 --> 01:27:22,795
Unfortunately our real execution
didn't finish yet but.

2241
01:27:22,796 --> 01:27:25,485
So we see that indeed

2242
01:27:25,486 --> 01:27:28,580
they entangled some different
qubit than ours but we

2243
01:27:28,581 --> 01:27:31,270
end up with 0-0 and 1-1 almost

2244
01:27:31,271 --> 01:27:32,360
exclusively but then
there are some in

2245
01:27:32,361 --> 01:27:34,230
the middle because of
the error rate, right?

2246
01:27:34,231 --> 01:27:35,870
So this is on
a real quantum computer.

2247
01:27:35,871 --> 01:27:36,940
We have some error rate where it

2248
01:27:36,941 --> 01:27:38,070
doesn't exactly
work according to

2249
01:27:38,071 --> 01:27:40,440
our model all the time
but pretty cool,

2250
01:27:40,441 --> 01:27:41,610
these are entangled and they're

2251
01:27:41,611 --> 01:27:43,240
measured and we have that.

2252
01:27:43,241 --> 01:27:44,860
That's the
experimental data right

2253
01:27:44,861 --> 01:27:47,835
there that entanglement
is a real thing.

2254
01:27:47,836 --> 01:27:52,550
Yeah. Okay, that concludes
the presentation.

2255
01:27:52,551 --> 01:27:54,705
Thank you very much. I hope you

2256
01:27:54,706 --> 01:27:57,185
all feel as though you
followed the whole thing,

2257
01:27:57,186 --> 01:27:59,555
no real confusion and

2258
01:27:59,556 --> 01:28:01,440
feel that you could
keep on learning.

2259
01:28:01,441 --> 01:28:03,900
This isn't like
mad genius science.

2260
01:28:03,901 --> 01:28:05,865
This is very accessible science.

2261
01:28:05,866 --> 01:28:08,840
So, thank you very much.

